import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by asavan on 04.12.2020.
 */
public class Leniya {

    static int[] example1000 = {0, 0, 1, 1, 0, 2, 0, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 4, 3, 3, 3, 4, 3, 4, 3, 4, 4, 4, 5, 4, 5, 4, 4, 4, 5, 4, 5, 4, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6, 6, 7, 6, 7, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 7, 7, 8, 7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 8, 8, 9, 8, 7, 8, 8, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 9, 9, 10, 9, 10, 9, 8, 9, 9, 9, 10, 9, 9, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 10, 10, 11, 10, 9, 10, 10, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 11, 11, 12, 11, 11, 11, 12, 11, 12, 11, 11, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 12, 12, 13, 12, 13, 12, 12, 12, 13, 12, 12, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 13, 13, 14, 13, 13, 13, 14, 13, 14, 13, 13, 13, 14, 13, 14, 13, 13, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 13, 14, 14, 14, 15, 14, 13, 14, 14, 14, 15, 14, 14, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 15, 15, 16, 15, 14, 15, 15, 15, 16, 15, 16, 15, 15, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 15, 16, 16, 16, 17, 16, 17, 16, 15, 16, 16, 16, 17, 16, 16, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 16, 17, 17, 17, 18, 17, 16, 17, 17, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 17, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 17, 18, 18, 18, 19, 18, 18, 18, 19, 18, 19, 18, 18, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 18, 19, 19, 19, 20, 19, 20, 19, 19, 19, 20, 19, 20, 19, 19, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 19, 20, 20, 20, 21, 20, 19, 20, 20, 20, 21, 20, 21, 20, 21, 20, 21, 20, 20, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 20, 21, 21, 21, 22, 21, 21, 21, 22, 21, 20, 21, 21, 21, 22, 21, 22, 21, 21, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 21, 22, 22, 22, 23, 22, 21, 22, 22, 22, 23, 22, 22, 22, 23, 22, 22, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 22, 23, 23, 23, 24, 23, 22, 23, 22, 23, 23, 23, 24, 23, 23, 23, 24, 23, 24, 23, 23, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23};

    public static void main(String[] args) {
        fillArray(200);
    }

    public static void fillArray(int n) {
        int[] arr = new int[n + 1];
        List<Integer> primes = getPrimesAndBounds(n);
        System.out.println("Begin " + primes.get(primes.size() - 1));
        long begin = System.currentTimeMillis();
        fillRec(arr, primes, 0, 0, 0, n);
        long end = System.currentTimeMillis();
        System.out.println(arr[10] == 3);
        System.out.println(Arrays.toString(arr));
        System.out.println(check(arr, example1000));
        System.out.println((end - begin));
    }

    private static List<Integer> getPrimesAndBounds(int n) {
        List<Integer> arr = new ArrayList<>(10000);
        arr.add(2);
        for (int i = 3; i <= n; i += 2) {
            if (isPrime(i)) {
                arr.add(i);
            }
        }
        return arr;
    }

    private static boolean isPrime(int n) {
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }


    private static void fillRec(int[] arr, List<Integer> primes, int i, int summ, int count, int n) {
//        // if (summ > n + 2) return false;
//        if (summ > n) {
//            return false;
//        }
        int prev = arr[summ];
        if (prev < count) {
            arr[summ] = count;
        }
        if (i >= primes.size()) {
            return;
        }
        int cand = primes.get(i);
        if (cand + summ > n) {
            return;
        }
        fillRec(arr, primes, i + 1, summ, count, n);
        fillRec(arr, primes, i + 1, summ + cand, count + 1, n);
    }


    private static boolean check(int[] arr, int[] example) {
        int ind = 0;
        while (ind < arr.length && ind < example.length) {
            if (arr[ind] != example[ind]) {
                System.out.println(ind);
                System.out.println(arr[ind]);
                System.out.println(example[ind]);
                return false;
            }
            ++ind;
        }
        return true;
    }
}
