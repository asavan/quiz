a$ = 8
int `anonymous namespace'::determinant<3>(std::array<std::array<int,3>,3> const &) PROC ; `anonymous namespace'::determinant<3>, COMDAT
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        mov     QWORD PTR [rsp+24], rdi
        mov     esi, DWORD PTR [rcx+28]
        mov     r9d, DWORD PTR [rcx+4]
        mov     edi, DWORD PTR [rcx+12]
        mov     r10d, DWORD PTR [rcx+20]
        mov     eax, r10d
        mov     edx, DWORD PTR [rcx+16]
        mov     ebx, edx
        imul    ebx, DWORD PTR [rcx+32]
        mov     r8d, DWORD PTR [rcx+24]
        mov     r11d, DWORD PTR [rcx+8]
        imul    eax, esi
        sub     ebx, eax
        mov     eax, r9d
        imul    ebx, DWORD PTR [rcx]
        imul    eax, edi
        imul    r9d, r8d
        imul    edi, r11d
        imul    eax, DWORD PTR [rcx+32]
        mov     ecx, r11d
        imul    ecx, r8d
        imul    edi, esi
        mov     rsi, QWORD PTR [rsp+16]
        imul    r9d, r10d
        sub     ebx, eax
        imul    ecx, edx
        sub     ebx, ecx
        lea     eax, DWORD PTR [r9+rbx]
        mov     rbx, QWORD PTR [rsp+8]
        add     eax, edi
        mov     rdi, QWORD PTR [rsp+24]
        ret     0
int `anonymous namespace'::determinant<3>(std::array<std::array<int,3>,3> const &) ENDP ; `anonymous namespace'::determinant<3>

a$ = 8
int `anonymous namespace'::determinant<2>(std::array<std::array<int,2>,2> const &) PROC ; `anonymous namespace'::determinant<2>, COMDAT
        mov     edx, DWORD PTR [rcx+8]
        mov     eax, DWORD PTR [rcx+12]
        imul    edx, DWORD PTR [rcx+4]
        imul    eax, DWORD PTR [rcx]
        sub     eax, edx
        ret     0
int `anonymous namespace'::determinant<2>(std::array<std::array<int,2>,2> const &) ENDP ; `anonymous namespace'::determinant<2>

step$ = 8
bool `anonymous namespace'::is_first(int) PROC                    ; `anonymous namespace'::is_first, COMDAT
        not     cl
        and     cl, 1
        mov     al, cl
        ret     0
bool `anonymous namespace'::is_first(int) ENDP                    ; `anonymous namespace'::is_first

d$GSCopy$1$ = 48
$T1 = 56
$T2 = 64
$T3 = 80
$T4 = 96
matrix$ = 224
digits$ = 232
d$ = 240
best1$ = 248
best2$ = 256
int `anonymous namespace'::who_wins(std::array<std::array<int,3>,3>,std::array<bool,9>,int,int,int) PROC ; `anonymous namespace'::who_wins, COMDAT
        push    rbx
        push    rbp
        push    rsi
        push    rdi
        push    r12
        push    r13
        push    r14
        push    r15
        sub     rsp, 152                      ; 00000098H
        mov     DWORD PTR d$GSCopy$1$[rsp], r8d
        mov     ebx, r9d
        mov     rbp, rdx
        mov     rsi, rcx
        cmp     r8d, 9
        jne     SHORT $LN11@who_wins
        mov     edx, DWORD PTR [rcx+4]
        mov     r8d, DWORD PTR [rcx+16]
        imul    r8d, DWORD PTR [rcx+32]
        mov     r9d, DWORD PTR [rcx+12]
        mov     eax, DWORD PTR [rcx+20]
        imul    eax, DWORD PTR [rcx+28]
        sub     r8d, eax
        mov     eax, edx
        imul    r8d, DWORD PTR [rcx]
        imul    edx, DWORD PTR [rsi+24]
        imul    eax, r9d
        imul    r9d, DWORD PTR [rsi+8]
        imul    edx, DWORD PTR [rsi+20]
        imul    eax, DWORD PTR [rcx+32]
        mov     ecx, DWORD PTR [rcx+8]
        imul    ecx, DWORD PTR [rsi+24]
        imul    r9d, DWORD PTR [rsi+28]
        sub     r8d, eax
        imul    ecx, DWORD PTR [rsi+16]
        sub     r8d, ecx
        lea     eax, DWORD PTR [rdx+r8]
        add     eax, r9d
        jmp     $LN1@who_wins
$LN11@who_wins:
        mov     r15d, DWORD PTR best2$[rsp]
        xor     edx, edx
        mov     r13d, edx
        mov     edi, edx
$LL4@who_wins:
        cmp     BYTE PTR [rdi+rbp], dl
        jne     $LN2@who_wins
        mov     BYTE PTR [rdi+rbp], 1
        mov     r12, rsi
        mov     QWORD PTR $T2[rsp], rdx
$LL7@who_wins:
        mov     rax, rdx
        mov     QWORD PTR $T1[rsp], rdx
        mov     r14, r12
$LL10@who_wins:
        cmp     DWORD PTR [r14], edx
        jne     $LN8@who_wins
        movsd   xmm0, QWORD PTR [rbp]
        lea     eax, DWORD PTR [r13+1]
        mov     DWORD PTR [r14], eax
        lea     rdx, QWORD PTR $T3[rsp]
        mov     al, BYTE PTR [rbp+8]
        lea     rcx, QWORD PTR $T4[rsp]
        movups  xmm1, XMMWORD PTR [rsi+16]
        inc     r8d
        mov     BYTE PTR $T3[rsp+8], al
        movsd   QWORD PTR $T3[rsp], xmm0
        mov     r9d, ebx
        movups  xmm0, XMMWORD PTR [rsi]
        mov     eax, DWORD PTR [rsi+32]
        movaps  XMMWORD PTR $T4[rsp+16], xmm1
        movaps  XMMWORD PTR $T4[rsp], xmm0
        mov     DWORD PTR $T4[rsp+32], eax
        mov     DWORD PTR [rsp+32], r15d
        call    int `anonymous namespace'::who_wins(std::array<std::array<int,3>,3>,std::array<bool,9>,int,int,int) ; `anonymous namespace'::who_wins
        mov     r8d, DWORD PTR d$GSCopy$1$[rsp]
        mov     ecx, eax
        mov     eax, r8d
        and     eax, 1
        jne     SHORT $LN14@who_wins
        cmp     r15d, ecx
        jge     SHORT $LN17@who_wins
        mov     r15d, ecx
        jmp     SHORT $LN17@who_wins
$LN14@who_wins:
        cmp     ebx, ecx
        cmovg   ebx, ecx
$LN17@who_wins:
        xor     edx, edx
        mov     DWORD PTR [r14], edx
        test    eax, eax
        je      SHORT $LN146@who_wins
        cmp     ecx, r15d
        jle     SHORT $LN19@who_wins
        test    eax, eax
        jne     SHORT $LN144@who_wins
$LN146@who_wins:
        cmp     ecx, ebx
        jge     SHORT $LN19@who_wins
$LN144@who_wins:
        mov     rax, QWORD PTR $T1[rsp]
$LN8@who_wins:
        inc     rax
        add     r14, 4
        mov     QWORD PTR $T1[rsp], rax
        cmp     rax, 3
        jl      $LL10@who_wins
        mov     rax, QWORD PTR $T2[rsp]
        add     r12, 12
        inc     rax
        mov     QWORD PTR $T2[rsp], rax
        cmp     rax, 3
        jl      $LL7@who_wins
        mov     BYTE PTR [rdi+rbp], dl
$LN2@who_wins:
        inc     r13d
        inc     rdi
        cmp     rdi, 9
        jl      $LL4@who_wins
        test    r8b, 1
        cmove   ebx, r15d
        mov     eax, ebx
$LN1@who_wins:
        add     rsp, 152                      ; 00000098H
        pop     r15
        pop     r14
        pop     r13
        pop     r12
        pop     rdi
        pop     rsi
        pop     rbp
        pop     rbx
        ret     0
$LN19@who_wins:
        mov     eax, ecx
        jmp     SHORT $LN1@who_wins
int `anonymous namespace'::who_wins(std::array<std::array<int,3>,3>,std::array<bool,9>,int,int,int) ENDP ; `anonymous namespace'::who_wins

$T1 = 48
digits$ = 48
$T2 = 64
int solve_array(void) PROC                                ; solve_array, COMDAT
$LN4:
        sub     rsp, 120                      ; 00000078H
        xor     eax, eax
        mov     DWORD PTR [rsp+32], -500      ; fffffffffffffe0cH
        xor     ecx, ecx
        mov     QWORD PTR digits$[rsp], rax
        movsd   xmm0, QWORD PTR digits$[rsp]
        lea     rdx, QWORD PTR $T1[rsp]
        xorps   xmm1, xmm1
        mov     DWORD PTR $T2[rsp+32], ecx
        mov     r9d, 500                      ; 000001f4H
        movsd   QWORD PTR $T1[rsp], xmm0
        xor     r8d, r8d
        mov     BYTE PTR $T1[rsp+8], al
        lea     rcx, QWORD PTR $T2[rsp]
        movaps  XMMWORD PTR $T2[rsp], xmm1
        movaps  XMMWORD PTR $T2[rsp+16], xmm1
        call    int `anonymous namespace'::who_wins(std::array<std::array<int,3>,3>,std::array<bool,9>,int,int,int) ; `anonymous namespace'::who_wins
        add     rsp, 120                      ; 00000078H
        ret     0
int solve_array(void) ENDP                                ; solve_array

this$ = 8
_Pos$ = 16
bool & std::array<bool,9>::operator[](unsigned __int64) PROC                ; std::array<bool,9>::operator[], COMDAT
        lea     rax, QWORD PTR [rdx+rcx]
        ret     0
bool & std::array<bool,9>::operator[](unsigned __int64) ENDP                ; std::array<bool,9>::operator[]

this$ = 8
_Pos$ = 16
int & std::array<int,3>::operator[](unsigned __int64) PROC              ; std::array<int,3>::operator[], COMDAT
        lea     rax, QWORD PTR [rcx+rdx*4]
        ret     0
int & std::array<int,3>::operator[](unsigned __int64) ENDP              ; std::array<int,3>::operator[]

this$ = 8
_Pos$ = 16
std::array<int,3> & std::array<std::array<int,3>,3>::operator[](unsigned __int64) PROC ; std::array<std::array<int,3>,3>::operator[], COMDAT
        lea     rax, QWORD PTR [rdx+rdx*2]
        lea     rax, QWORD PTR [rcx+rax*4]
        ret     0
std::array<int,3> & std::array<std::array<int,3>,3>::operator[](unsigned __int64) ENDP ; std::array<std::array<int,3>,3>::operator[]

this$ = 8
_Pos$ = 16
int const & std::array<int,2>::operator[](unsigned __int64)const  PROC              ; std::array<int,2>::operator[], COMDAT
        lea     rax, QWORD PTR [rcx+rdx*4]
        ret     0
int const & std::array<int,2>::operator[](unsigned __int64)const  ENDP              ; std::array<int,2>::operator[]

this$ = 8
_Pos$ = 16
int const & std::array<int,3>::operator[](unsigned __int64)const  PROC              ; std::array<int,3>::operator[], COMDAT
        lea     rax, QWORD PTR [rcx+rdx*4]
        ret     0
int const & std::array<int,3>::operator[](unsigned __int64)const  ENDP              ; std::array<int,3>::operator[]

this$ = 8
_Pos$ = 16
std::array<int,2> const & std::array<std::array<int,2>,2>::operator[](unsigned __int64)const  PROC ; std::array<std::array<int,2>,2>::operator[], COMDAT
        lea     rax, QWORD PTR [rcx+rdx*8]
        ret     0
std::array<int,2> const & std::array<std::array<int,2>,2>::operator[](unsigned __int64)const  ENDP ; std::array<std::array<int,2>,2>::operator[]

this$ = 8
_Pos$ = 16
std::array<int,3> const & std::array<std::array<int,3>,3>::operator[](unsigned __int64)const  PROC ; std::array<std::array<int,3>,3>::operator[], COMDAT
        lea     rax, QWORD PTR [rdx+rdx*2]
        lea     rax, QWORD PTR [rcx+rax*4]
        ret     0
std::array<int,3> const & std::array<std::array<int,3>,3>::operator[](unsigned __int64)const  ENDP ; std::array<std::array<int,3>,3>::operator[]