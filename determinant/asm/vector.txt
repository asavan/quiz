std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)' DD imagerel std::bad_array_new_length `RTTI Type Descriptor' ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
        DD      02H
        DD      00H
        DD      0ffffffffH
        DD      00H
        DD      040H
        DD      imagerel std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
std::bad_array_new_length::`RTTI Base Class Array' DD imagerel std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)' ; std::bad_array_new_length::`RTTI Base Class Array'
        DD      imagerel std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
        DD      imagerel std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
        ORG $+3
std::bad_array_new_length::`RTTI Class Hierarchy Descriptor' DD 00H       ; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
        DD      00H
        DD      03H
        DD      imagerel std::bad_array_new_length::`RTTI Base Class Array'
const std::bad_array_new_length::`RTTI Complete Object Locator' DD 01H             ; std::bad_array_new_length::`RTTI Complete Object Locator'
        DD      00H
        DD      00H
        DD      imagerel std::bad_array_new_length `RTTI Type Descriptor'
        DD      imagerel std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
        DD      imagerel const std::bad_array_new_length::`RTTI Complete Object Locator'
std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)' DD imagerel std::bad_alloc `RTTI Type Descriptor' ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
        DD      01H
        DD      00H
        DD      0ffffffffH
        DD      00H
        DD      040H
        DD      imagerel std::bad_alloc::`RTTI Class Hierarchy Descriptor'
std::bad_alloc::`RTTI Base Class Array' DD imagerel std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)' ; std::bad_alloc::`RTTI Base Class Array'
        DD      imagerel std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
        ORG $+3
std::bad_alloc::`RTTI Class Hierarchy Descriptor' DD 00H                            ; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
        DD      00H
        DD      02H
        DD      imagerel std::bad_alloc::`RTTI Base Class Array'
const std::bad_alloc::`RTTI Complete Object Locator' DD 01H                      ; std::bad_alloc::`RTTI Complete Object Locator'
        DD      00H
        DD      00H
        DD      imagerel std::bad_alloc `RTTI Type Descriptor'
        DD      imagerel std::bad_alloc::`RTTI Class Hierarchy Descriptor'
        DD      imagerel const std::bad_alloc::`RTTI Complete Object Locator'
std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)' DD imagerel std::exception `RTTI Type Descriptor' ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
        DD      00H
        DD      00H
        DD      0ffffffffH
        DD      00H
        DD      040H
        DD      imagerel std::exception::`RTTI Class Hierarchy Descriptor'
std::exception::`RTTI Base Class Array' DD imagerel std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)' ; std::exception::`RTTI Base Class Array'
        ORG $+3
std::exception::`RTTI Class Hierarchy Descriptor' DD 00H                            ; std::exception::`RTTI Class Hierarchy Descriptor'
        DD      00H
        DD      01H
        DD      imagerel std::exception::`RTTI Base Class Array'
const std::exception::`RTTI Complete Object Locator' DD 01H                      ; std::exception::`RTTI Complete Object Locator'
        DD      00H
        DD      00H
        DD      imagerel std::exception `RTTI Type Descriptor'
        DD      imagerel std::exception::`RTTI Class Hierarchy Descriptor'
        DD      imagerel const std::exception::`RTTI Complete Object Locator'
`string' DB 'vector too long', 00H ; `string'
`string' DB 'vector<bool> too lo'
        DB      'ng', 00H                             ; `string'
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
        DD      imagerel std::exception `RTTI Type Descriptor'
        DD      00H
        DD      0ffffffffH
        ORG $+4
        DD      018H
        DD      imagerel std::exception::exception(std::exception const &)
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
        DD      imagerel std::bad_alloc `RTTI Type Descriptor'
        DD      00H
        DD      0ffffffffH
        ORG $+4
        DD      018H
        DD      imagerel std::bad_alloc::bad_alloc(std::bad_alloc const &)
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
        DD      imagerel std::bad_array_new_length `RTTI Type Descriptor'
        DD      00H
        DD      0ffffffffH
        ORG $+4
        DD      018H
        DD      imagerel std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length const &)
_CTA3 ?? std::AVbad_array_new_length DD 03H
        DD      imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
        DD      imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
        DD      imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
_TI3 ?? std::AVbad_array_new_length DD 00H
        DD      imagerel virtual std::bad_array_new_length::~bad_array_new_length(void)
        DD      00H
        DD      imagerel _CTA3 ?? std::AVbad_array_new_length
`string' DB 'bad array new length', 00H ; `string'
const std::bad_array_new_length::`vftable' DQ FLAT:const std::bad_array_new_length::`RTTI Complete Object Locator' ; std::bad_array_new_length::`vftable'
        DQ      FLAT:virtual void * std::bad_array_new_length::`vector deleting destructor'(unsigned int)
        DQ      FLAT:virtual char const * std::exception::what(void)const 
const std::bad_alloc::`vftable' DQ FLAT:const std::bad_alloc::`RTTI Complete Object Locator'  ; std::bad_alloc::`vftable'
        DQ      FLAT:virtual void * std::bad_alloc::`vector deleting destructor'(unsigned int)
        DQ      FLAT:virtual char const * std::exception::what(void)const 
`string' DB 'Unknown exception', 00H ; `string'
const std::exception::`vftable' DQ FLAT:const std::exception::`RTTI Complete Object Locator'  ; std::exception::`vftable'
        DQ      FLAT:virtual void * std::exception::`vector deleting destructor'(unsigned int)
        DQ      FLAT:virtual char const * std::exception::what(void)const 
$ip2state$std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) DB 02H
        DB      'n'
        DB      02H
$stateUnwindMap$std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) DB 02H
        DB      0aH
        DD      imagerel std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(void)
        DB      040H
$cppxdata$std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) DB 028H
        DD      imagerel $stateUnwindMap$std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &)
        DD      imagerel $ip2state$std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &)
$ip2state$void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) DB 06H
        DB      0c6H
        DB      00H
        DB      '\'
        DB      02H
        DB      '$'
        DB      00H
$stateUnwindMap$void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) DB 02H
        DB      0aH
        DD      imagerel std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >(void)
        DB      070H
$cppxdata$void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) DB 028H
        DD      imagerel $stateUnwindMap$void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag)
        DD      imagerel $ip2state$void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag)
$ip2state$int solve_vector_simple(void) DB 012H
        DB      0a8H
        DB      00H
        DB      'T'
        DB      02H
        DB      'T'
        DB      04H
        DB      'D'
        DB      06H
        DB      '2'
        DB      0aH
        DB      'T'
        DB      0cH
        DB      01cH
        DB      0eH
        DB      '@'
        DB      0aH
        DB      01dH, 03H
        DB      00H
$stateUnwindMap$int solve_vector_simple(void) DB 0eH
        DB      0aH
        DD      imagerel std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void)
        DB      081H
        DB      02H
        DB      03aH
        DD      imagerel std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void)
        DB      0e1H
        DB      02H
        DB      07eH
        DD      imagerel int `int solve_vector_simple(void)'::`1'::dtor$3
        DB      02aH
        DD      imagerel std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void)
        DB      070H
        DB      0d2H
        DD      imagerel std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void)
        DB      070H
        DB      032H
        DD      imagerel std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void)
        DB      0a0H
        DB      062H
        DD      imagerel std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >(void)
        DB      0a0H
$cppxdata$int solve_vector_simple(void) DB 028H
        DD      imagerel $stateUnwindMap$int solve_vector_simple(void)
        DD      imagerel $ip2state$int solve_vector_simple(void)
$ip2state$std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) DB 04H
        DB      'x'
        DB      00H
        DB      ' '
        DB      02H
$stateUnwindMap$std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) DB 02H
        DB      0cH
        DD      imagerel std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void)
        DB      060H
$cppxdata$std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) DB 028H
        DD      imagerel $stateUnwindMap$std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &)
        DD      imagerel $ip2state$std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &)

a$ = 8
int `anonymous namespace'::determinant<3>(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > const &) PROC ; `anonymous namespace'::determinant<3>, COMDAT
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        mov     QWORD PTR [rsp+24], rdi
        mov     rax, QWORD PTR [rcx]
        mov     r8, QWORD PTR [rax+48]
        mov     rdx, QWORD PTR [rax+24]
        mov     rcx, QWORD PTR [rax]
        mov     edi, DWORD PTR [r8+4]
        mov     ebx, DWORD PTR [rdx+8]
        mov     r9d, DWORD PTR [rdx]
        mov     r11d, DWORD PTR [rdx+4]
        mov     edx, DWORD PTR [rcx]
        mov     eax, edx
        mov     esi, DWORD PTR [rcx+4]
        mov     r10d, DWORD PTR [rcx+8]
        imul    edx, DWORD PTR [r8+8]
        imul    eax, edi
        imul    edi, r9d
        imul    r9d, DWORD PTR [r8+8]
        imul    edx, r11d
        imul    eax, ebx
        imul    edi, r10d
        imul    r9d, esi
        imul    esi, ebx
        mov     rbx, QWORD PTR [rsp+8]
        imul    r10d, r11d
        sub     edi, eax
        sub     edi, r9d
        imul    esi, DWORD PTR [r8]
        imul    r10d, DWORD PTR [r8]
        sub     edi, r10d
        lea     eax, DWORD PTR [rdx+rdi]
        mov     rdi, QWORD PTR [rsp+24]
        add     eax, esi
        mov     rsi, QWORD PTR [rsp+16]
        ret     0
int `anonymous namespace'::determinant<3>(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > const &) ENDP ; `anonymous namespace'::determinant<3>

step$ = 8
bool `anonymous namespace'::is_first(int) PROC                    ; `anonymous namespace'::is_first, COMDAT
        not     cl
        and     cl, 1
        mov     al, cl
        ret     0
bool `anonymous namespace'::is_first(int) ENDP                    ; `anonymous namespace'::is_first

tv1458 = 48
$T5 = 56
tv1457 = 64
matrix$ = 144
digits$ = 152
d$ = 160
best1$ = 168
best2$ = 176
int `anonymous namespace'::who_wins(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > &,std::vector<bool,std::allocator<bool> > &,int,int,int) PROC ; `anonymous namespace'::who_wins, COMDAT
        mov     rax, rsp
        mov     QWORD PTR [rax+32], rbx
        mov     DWORD PTR [rax+24], r8d
        mov     QWORD PTR [rax+16], rdx
        mov     QWORD PTR [rax+8], rcx
        push    rbp
        push    rsi
        push    rdi
        push    r12
        push    r13
        push    r14
        push    r15
        sub     rsp, 80                             ; 00000050H
        mov     r10, QWORD PTR [rcx+8]
        mov     ebp, r8d
        mov     r8, rdx
        mov     ebx, r9d
        mov     r9, QWORD PTR [rcx]
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        sub     r10, r9
        mov     r11, rcx
        imul    r10
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rdx, rax
        mov     r12d, edx
        imul    r12d, edx
        cmp     ebp, r12d
        jne     SHORT $LN11@who_wins
        mov     rcx, QWORD PTR [r9+24]
        mov     rdx, QWORD PTR [r9+48]
        mov     rax, QWORD PTR [r9]
        mov     r11d, DWORD PTR [rcx+8]
        mov     r8d, DWORD PTR [rcx]
        mov     r9d, DWORD PTR [rax+8]
        mov     edi, DWORD PTR [rax+4]
        mov     r10d, DWORD PTR [rcx+4]
        mov     ecx, DWORD PTR [rax]
        mov     eax, ecx
        mov     ebx, DWORD PTR [rdx+4]
        imul    ecx, DWORD PTR [rdx+8]
        imul    eax, ebx
        imul    ebx, r8d
        imul    r8d, DWORD PTR [rdx+8]
        imul    ecx, r10d
        imul    eax, r11d
        imul    ebx, r9d
        imul    r8d, edi
        imul    r9d, r10d
        imul    edi, r11d
        sub     ebx, eax
        sub     ebx, r8d
        imul    r9d, DWORD PTR [rdx]
        imul    edi, DWORD PTR [rdx]
        sub     ebx, r9d
        lea     eax, DWORD PTR [rcx+rbx]
        add     eax, edi
        jmp     $LN1@who_wins
$LN11@who_wins:
        mov     esi, DWORD PTR best2$[rsp]
        xor     r14d, r14d
        movsxd  r9, edx
        mov     QWORD PTR tv1458[rsp], r9
        test    r12d, r12d
        jle     $LN231@who_wins
$LL4@who_wins:
        mov     r8, QWORD PTR [r8]
        mov     eax, 1
        mov     ecx, r14d
        and     ecx, 31
        mov     edi, r14d
        shr     rdi, 5
        shl     eax, cl
        mov     r15d, r14d
        mov     QWORD PTR tv1457[rsp], rcx
        mov     edx, DWORD PTR [r8+rdi*4]
        test    eax, edx
        jne     $LN234@who_wins
        and     QWORD PTR $T5[rsp], 0
        bts     edx, ecx
        mov     DWORD PTR [r8+rdi*4], edx
        test    r9, r9
        jle     $LN6@who_wins
        xor     r13d, r13d
$LL7@who_wins:
        xor     ebp, ebp
$LL10@who_wins:
        mov     rax, QWORD PTR [r11]
        mov     rcx, QWORD PTR [rax+r13]
        cmp     DWORD PTR [rcx+rbp*4], 0
        jne     SHORT $LN8@who_wins
        mov     r8d, DWORD PTR d$[rsp]
        lea     eax, DWORD PTR [r14+1]
        mov     rdx, QWORD PTR digits$[rsp]
        inc     r8d
        mov     DWORD PTR [rcx+rbp*4], eax
        mov     r9d, ebx
        mov     rcx, r11
        mov     DWORD PTR [rsp+32], esi
        call    int `anonymous namespace'::who_wins(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > &,std::vector<bool,std::allocator<bool> > &,int,int,int) ; `anonymous namespace'::who_wins
        mov     r8d, DWORD PTR d$[rsp]
        mov     edx, eax
        and     r8d, 1
        jne     SHORT $LN14@who_wins
        cmp     esi, eax
        jge     SHORT $LN17@who_wins
        mov     esi, eax
        jmp     SHORT $LN17@who_wins
$LN14@who_wins:
        cmp     ebx, edx
        cmovg   ebx, edx
$LN17@who_wins:
        mov     r11, QWORD PTR matrix$[rsp]
        mov     rax, QWORD PTR [r11]
        mov     rcx, QWORD PTR [rax+r13]
        and     DWORD PTR [rcx+rbp*4], 0
        test    r8d, r8d
        je      SHORT $LN239@who_wins
        cmp     edx, esi
        jle     $LN19@who_wins
        test    r8d, r8d
        jne     SHORT $LN236@who_wins
$LN239@who_wins:
        cmp     edx, ebx
        jge     $LN19@who_wins
$LN236@who_wins:
        mov     r9, QWORD PTR tv1458[rsp]
$LN8@who_wins:
        inc     rbp
        cmp     rbp, r9
        jl      $LL10@who_wins
        mov     rax, QWORD PTR $T5[rsp]
        add     r13, 24
        inc     rax
        mov     QWORD PTR $T5[rsp], rax
        cmp     rax, r9
        jl      $LL7@who_wins
$LN6@who_wins:
        mov     r8, QWORD PTR digits$[rsp]
        mov     rdx, QWORD PTR tv1457[rsp]
        mov     rcx, QWORD PTR [r8]
        mov     eax, DWORD PTR [rcx+rdi*4]
        btr     eax, edx
        mov     DWORD PTR [rcx+rdi*4], eax
        jmp     SHORT $LN2@who_wins
$LN234@who_wins:
        mov     r8, QWORD PTR digits$[rsp]
$LN2@who_wins:
        inc     r14d
        cmp     r14d, r12d
        jl      $LL4@who_wins
        mov     ebp, DWORD PTR d$[rsp]
$LN231@who_wins:
        test    bpl, 1
        cmove   ebx, esi
        mov     eax, ebx
$LN1@who_wins:
        mov     rbx, QWORD PTR [rsp+168]
        add     rsp, 80                             ; 00000050H
        pop     r15
        pop     r14
        pop     r13
        pop     r12
        pop     rdi
        pop     rsi
        pop     rbp
        ret     0
$LN19@who_wins:
        mov     rax, QWORD PTR digits$[rsp]
        and     r15d, 31
        mov     rcx, QWORD PTR [rax]
        mov     eax, DWORD PTR [rcx+rdi*4]
        btr     eax, r15d
        mov     DWORD PTR [rcx+rdi*4], eax
        mov     eax, edx
        jmp     SHORT $LN1@who_wins
int `anonymous namespace'::who_wins(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > &,std::vector<bool,std::allocator<bool> > &,int,int,int) ENDP ; `anonymous namespace'::who_wins

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int solve_vector_simple(void) PROC                        ; solve_vector_simple, COMDAT
$LN120:
        mov     rax, rsp
        mov     QWORD PTR [rax+8], rbx
        mov     QWORD PTR [rax+16], rsi
        mov     QWORD PTR [rax+24], rdi
        mov     QWORD PTR [rax+32], r14
        push    rbp
        lea     rbp, QWORD PTR [rax-95]
        sub     rsp, 256                      ; 00000100H
        mov     rax, QWORD PTR __security_cookie
        xor     rax, rsp
        mov     QWORD PTR __$ArrayPad$[rbp-169], rax
        xor     r14d, r14d
        mov     QWORD PTR $T10[rbp-169], r14
        mov     DWORD PTR $T10[rbp-161], r14d
        xorps   xmm0, xmm0
        movdqa  XMMWORD PTR $T13[rbp-169], xmm0
        mov     QWORD PTR $T13[rbp-153], r14
        mov     r9b, BYTE PTR $T8[rbp-169]
        lea     r8, QWORD PTR $T10[rbp-157]
        lea     rdx, QWORD PTR $T10[rbp-169]
        lea     rcx, QWORD PTR $T13[rbp-169]
        call    void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
        npad    1
        mov     QWORD PTR $T11[rbp-169], r14
        mov     DWORD PTR $T11[rbp-161], r14d
        mov     QWORD PTR $T13[rbp-145], r14
        xorps   xmm0, xmm0
        movdqa  XMMWORD PTR $T13[rbp-137], xmm0
        mov     r9b, BYTE PTR $T7[rbp-169]
        lea     r8, QWORD PTR $T11[rbp-157]
        lea     rdx, QWORD PTR $T11[rbp-169]
        lea     rcx, QWORD PTR $T13[rbp-145]
        call    void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
        npad    1
        mov     QWORD PTR $T12[rbp-169], r14
        mov     DWORD PTR $T12[rbp-161], r14d
        xorps   xmm0, xmm0
        movdqa  XMMWORD PTR $T13[rbp-121], xmm0
        mov     QWORD PTR $T13[rbp-105], r14
        mov     r9b, BYTE PTR $T6[rbp-169]
        lea     r8, QWORD PTR $T12[rbp-157]
        lea     rdx, QWORD PTR $T12[rbp-169]
        lea     rcx, QWORD PTR $T13[rbp-121]
        call    void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
        npad    1
        xorps   xmm0, xmm0
        movdqu  XMMWORD PTR matrix$[rbp-169], xmm0
        mov     QWORD PTR matrix$[rbp-153], r14
        mov     r9b, BYTE PTR $T5[rbp-169]
        lea     r8, QWORD PTR $T13[rbp-97]
        lea     rdx, QWORD PTR $T13[rbp-169]
        lea     rcx, QWORD PTR matrix$[rbp-169]
        call    void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>
        npad    1
        lea     r9, OFFSET FLAT:std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
        lea     edx, QWORD PTR [r14+24]
        lea     r8d, QWORD PTR [r14+3]
        lea     rcx, QWORD PTR $T13[rbp-169]
        call    void `eh vector destructor iterator'(void *,unsigned __int64,unsigned __int64,void (__cdecl*)(void *))
        mov     DWORD PTR $T9[rbp-169], r14d
        xorps   xmm0, xmm0
        movdqu  XMMWORD PTR digits$[rbp-169], xmm0
        mov     QWORD PTR digits$[rbp-153], r14
        lea     r8, QWORD PTR $T9[rbp-169]
        lea     edx, QWORD PTR [r14+1]
        lea     rcx, QWORD PTR digits$[rbp-169]
        call    void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>
        mov     QWORD PTR digits$[rbp-145], r14
        lea     edx, QWORD PTR [r14+9]
        lea     rcx, QWORD PTR digits$[rbp-169]
        call    void std::vector<bool,std::allocator<bool> >::_Trim(unsigned __int64) ; std::vector<bool,std::allocator<bool> >::_Trim
        npad    1
        mov     DWORD PTR [rsp+32], -500      ; fffffffffffffe0cH
        mov     r9d, 500                      ; 000001f4H
        xor     r8d, r8d
        lea     rdx, QWORD PTR digits$[rbp-169]
        lea     rcx, QWORD PTR matrix$[rbp-169]
        call    int `anonymous namespace'::who_wins(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > &,std::vector<bool,std::allocator<bool> > &,int,int,int) ; `anonymous namespace'::who_wins
        mov     esi, eax
        mov     rcx, QWORD PTR digits$[rbp-169]
        test    rcx, rcx
        je      SHORT $LN64@solve_vect
        mov     rdx, QWORD PTR digits$[rbp-153]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        xorps   xmm0, xmm0
        movdqu  XMMWORD PTR digits$[rbp-169], xmm0
        mov     QWORD PTR digits$[rbp-153], r14
$LN64@solve_vect:
        mov     rbx, QWORD PTR matrix$[rbp-169]
        test    rbx, rbx
        je      $LN71@solve_vect
        mov     rdi, QWORD PTR matrix$[rbp-161]
        cmp     rbx, rdi
        je      SHORT $LN77@solve_vect
$LL78@solve_vect:
        mov     rcx, QWORD PTR [rbx]
        test    rcx, rcx
        je      SHORT $LN88@solve_vect
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        mov     QWORD PTR [rbx], r14
        mov     QWORD PTR [rbx+8], r14
        mov     QWORD PTR [rbx+16], r14
$LN88@solve_vect:
        add     rbx, 24
        cmp     rbx, rdi
        jne     SHORT $LL78@solve_vect
        mov     rbx, QWORD PTR matrix$[rbp-169]
$LN77@solve_vect:
        mov     rcx, QWORD PTR matrix$[rbp-153]
        sub     rcx, rbx
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        imul    rcx
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rdx, rax
        lea     rdx, QWORD PTR [rdx+rdx*2]
        shl     rdx, 3
        mov     rax, rbx
        cmp     rdx, 4096               ; 00001000H
        jb      SHORT $LN106@solve_vect
        add     rdx, 39                             ; 00000027H
        mov     rbx, QWORD PTR [rbx-8]
        sub     rax, rbx
        add     rax, -8
        cmp     rax, 31
        ja      SHORT $LN118@solve_vect
$LN106@solve_vect:
        mov     rcx, rbx
        call    void operator delete(void *,unsigned __int64)               ; operator delete
$LN71@solve_vect:
        mov     eax, esi
        mov     rcx, QWORD PTR __$ArrayPad$[rbp-169]
        xor     rcx, rsp
        call    __security_check_cookie
        lea     r11, QWORD PTR [rsp+256]
        mov     rbx, QWORD PTR [r11+16]
        mov     rsi, QWORD PTR [r11+24]
        mov     rdi, QWORD PTR [r11+32]
        mov     r14, QWORD PTR [r11+40]
        mov     rsp, r11
        pop     rbp
        ret     0
$LN118@solve_vect:
        call    _invalid_parameter_noinfo_noreturn
        int     3
$LN116@solve_vect:
int solve_vector_simple(void) ENDP                        ; solve_vector_simple
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$0 PROC   ; `solve_vector_simple'::`1'::dtor$0
        lea     rcx, QWORD PTR $T13[rdx]
        jmp     std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
int `int solve_vector_simple(void)'::`1'::dtor$0 ENDP   ; `solve_vector_simple'::`1'::dtor$0
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$1 PROC   ; `solve_vector_simple'::`1'::dtor$1
        lea     rcx, QWORD PTR $T13[rdx+24]
        jmp     std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
int `int solve_vector_simple(void)'::`1'::dtor$1 ENDP   ; `solve_vector_simple'::`1'::dtor$1
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$3 PROC   ; `solve_vector_simple'::`1'::dtor$3
        push    rbp
        sub     rsp, 32                             ; 00000020H
        mov     rbp, rdx
        lea     r9, OFFSET FLAT:std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
        mov     r8d, 3
        mov     edx, 24
        lea     rcx, QWORD PTR $T13[rbp]
        call    void `eh vector destructor iterator'(void *,unsigned __int64,unsigned __int64,void (__cdecl*)(void *))
        add     rsp, 32                             ; 00000020H
        pop     rbp
        ret     0
int `int solve_vector_simple(void)'::`1'::dtor$3 ENDP   ; `solve_vector_simple'::`1'::dtor$3
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$4 PROC   ; `solve_vector_simple'::`1'::dtor$4
        lea     rcx, QWORD PTR matrix$[rdx]
        jmp     std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
int `int solve_vector_simple(void)'::`1'::dtor$4 ENDP   ; `solve_vector_simple'::`1'::dtor$4
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$6 PROC   ; `solve_vector_simple'::`1'::dtor$6
        lea     rcx, QWORD PTR digits$[rdx]
        jmp     std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >
int `int solve_vector_simple(void)'::`1'::dtor$6 ENDP   ; `solve_vector_simple'::`1'::dtor$6
$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$5 PROC   ; `solve_vector_simple'::`1'::dtor$5
        lea     rcx, QWORD PTR digits$[rdx]
        jmp     std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >(void) ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
int `int solve_vector_simple(void)'::`1'::dtor$5 ENDP   ; `solve_vector_simple'::`1'::dtor$5

a$ = 8
int `anonymous namespace'::determinant<2>(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > const &) PROC ; `anonymous namespace'::determinant<2>, COMDAT
        mov     rax, QWORD PTR [rcx]
        mov     rcx, QWORD PTR [rax+24]
        mov     rdx, QWORD PTR [rax]
        mov     eax, DWORD PTR [rcx+4]
        mov     r8d, DWORD PTR [rdx+4]
        imul    r8d, DWORD PTR [rcx]
        imul    eax, DWORD PTR [rdx]
        sub     eax, r8d
        ret     0
int `anonymous namespace'::determinant<2>(std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > const &) ENDP ; `anonymous namespace'::determinant<2>

$T1 = 32
void std::_Throw_bad_array_new_length(void) PROC            ; std::_Throw_bad_array_new_length, COMDAT
$LN4:
        sub     rsp, 72                             ; 00000048H
        lea     rcx, QWORD PTR $T1[rsp]
        call    std::bad_array_new_length::bad_array_new_length(void)    ; std::bad_array_new_length::bad_array_new_length
        lea     rdx, OFFSET FLAT:_TI3 ?? std::AVbad_array_new_length
        lea     rcx, QWORD PTR $T1[rsp]
        call    _CxxThrowException
        int     3
$LN3@Throw_bad_:
void std::_Throw_bad_array_new_length(void) ENDP            ; std::_Throw_bad_array_new_length

this$ = 8
_First_arg$ = 16
_Last_arg$ = 24
std::initializer_list<int>::initializer_list<int>(int const *,int const *) PROC      ; std::initializer_list<int>::initializer_list<int>, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], r8
        ret     0
std::initializer_list<int>::initializer_list<int>(int const *,int const *) ENDP      ; std::initializer_list<int>::initializer_list<int>

this$ = 8
_First_arg$ = 16
_Last_arg$ = 24
std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *) PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], r8
        ret     0
std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *) ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::initializer_list<std::vector<int,std::allocator<int> > >

this$ = 8
int const * std::initializer_list<int>::begin(void)const  PROC        ; std::initializer_list<int>::begin, COMDAT
        mov     rax, QWORD PTR [rcx]
        ret     0
int const * std::initializer_list<int>::begin(void)const  ENDP        ; std::initializer_list<int>::begin

this$ = 8
std::vector<int,std::allocator<int> > const * std::initializer_list<std::vector<int,std::allocator<int> > >::begin(void)const  PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin, COMDAT
        mov     rax, QWORD PTR [rcx]
        ret     0
std::vector<int,std::allocator<int> > const * std::initializer_list<std::vector<int,std::allocator<int> > >::begin(void)const  ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::begin

this$ = 8
int const * std::initializer_list<int>::end(void)const  PROC      ; std::initializer_list<int>::end, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        ret     0
int const * std::initializer_list<int>::end(void)const  ENDP      ; std::initializer_list<int>::end

this$ = 8
std::vector<int,std::allocator<int> > const * std::initializer_list<std::vector<int,std::allocator<int> > >::end(void)const  PROC ; std::initializer_list<std::vector<int,std::allocator<int> > >::end, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        ret     0
std::vector<int,std::allocator<int> > const * std::initializer_list<std::vector<int,std::allocator<int> > >::end(void)const  ENDP ; std::initializer_list<std::vector<int,std::allocator<int> > >::end

static __int64 std::numeric_limits<__int64>::max(void) PROC             ; std::numeric_limits<__int64>::max, COMDAT
        mov     rax, 9223372036854775807      ; 7fffffffffffffffH
        ret     0
static __int64 std::numeric_limits<__int64>::max(void) ENDP             ; std::numeric_limits<__int64>::max

_Arg$ = 8
unsigned int const & std::forward<unsigned int const &>(unsigned int const &) PROC              ; std::forward<unsigned int const &>, COMDAT
        mov     rax, rcx
        ret     0
unsigned int const & std::forward<unsigned int const &>(unsigned int const &) ENDP              ; std::forward<unsigned int const &>

_Arg$ = 8
std::allocator<int> const & std::forward<std::allocator<int> const &>(std::allocator<int> const &) PROC ; std::forward<std::allocator<int> const &>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> const & std::forward<std::allocator<int> const &>(std::allocator<int> const &) ENDP ; std::forward<std::allocator<int> const &>

_Arg$ = 8
std::allocator<unsigned int> const & std::forward<std::allocator<unsigned int> const &>(std::allocator<unsigned int> const &) PROC ; std::forward<std::allocator<unsigned int> const &>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int> const & std::forward<std::allocator<unsigned int> const &>(std::allocator<unsigned int> const &) ENDP ; std::forward<std::allocator<unsigned int> const &>

_Arg$ = 8
std::allocator<std::vector<int,std::allocator<int> > > const & std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>(std::allocator<std::vector<int,std::allocator<int> > > const &) PROC ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > > const & std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>(std::allocator<std::vector<int,std::allocator<int> > > const &) ENDP ; std::forward<std::allocator<std::vector<int,std::allocator<int> > > const &>

_Arg$ = 8
std::vector<int,std::allocator<int> > const & std::forward<std::vector<int,std::allocator<int> > const &>(std::vector<int,std::allocator<int> > const &) PROC ; std::forward<std::vector<int,std::allocator<int> > const &>, COMDAT
        mov     rax, rcx
        ret     0
std::vector<int,std::allocator<int> > const & std::forward<std::vector<int,std::allocator<int> > const &>(std::vector<int,std::allocator<int> > const &) ENDP ; std::forward<std::vector<int,std::allocator<int> > const &>

_Arg$ = 8
std::allocator<int> && std::forward<std::allocator<int> >(std::allocator<int> &) PROC ; std::forward<std::allocator<int> >, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> && std::forward<std::allocator<int> >(std::allocator<int> &) ENDP ; std::forward<std::allocator<int> >

_Left$ = 8
_Right$ = 16
unsigned __int64 const & std::_Min_value<unsigned __int64>(unsigned __int64 const &,unsigned __int64 const &) PROC          ; std::_Min_value<unsigned __int64>, COMDAT
        mov     rax, QWORD PTR [rcx]
        cmp     QWORD PTR [rdx], rax
        cmovb   rcx, rdx
        mov     rax, rcx
        ret     0
unsigned __int64 const & std::_Min_value<unsigned __int64>(unsigned __int64 const &,unsigned __int64 const &) ENDP          ; std::_Min_value<unsigned __int64>

this$ = 8
_Message$ = 16
std::bad_alloc::bad_alloc(char const * const) PROC                  ; std::bad_alloc::bad_alloc, COMDAT
        and     QWORD PTR [rcx+16], 0
        lea     rax, OFFSET FLAT:const std::bad_alloc::`vftable'
        mov     QWORD PTR [rcx], rax
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], rdx
        ret     0
std::bad_alloc::bad_alloc(char const * const) ENDP                  ; std::bad_alloc::bad_alloc

this$ = 8
std::bad_array_new_length::bad_array_new_length(void) PROC             ; std::bad_array_new_length::bad_array_new_length, COMDAT
        and     QWORD PTR [rcx+16], 0
        lea     rax, OFFSET FLAT:`string'
        mov     QWORD PTR [rcx+8], rax
        lea     rax, OFFSET FLAT:const std::bad_array_new_length::`vftable'
        mov     QWORD PTR [rcx], rax
        mov     rax, rcx
        ret     0
std::bad_array_new_length::bad_array_new_length(void) ENDP             ; std::bad_array_new_length::bad_array_new_length

this$ = 8
_Message$ = 16
__formal$ = 24
std::exception::exception(char const * const,int) PROC           ; std::exception::exception, COMDAT
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     QWORD PTR [rcx], rax
        mov     rax, rcx
        and     QWORD PTR [rcx+16], 0
        mov     QWORD PTR [rcx+8], rdx
        ret     0
std::exception::exception(char const * const,int) ENDP           ; std::exception::exception

this$ = 48
__that$ = 56
std::bad_alloc::bad_alloc(std::bad_alloc const &) PROC             ; std::bad_alloc::bad_alloc, COMDAT
$LN7:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rax, rdx
        lea     rcx, OFFSET FLAT:const std::exception::`vftable'
        xorps   xmm0, xmm0
        mov     QWORD PTR [rbx], rcx
        lea     rdx, QWORD PTR [rbx+8]
        lea     rcx, QWORD PTR [rax+8]
        movups  XMMWORD PTR [rdx], xmm0
        call    __std_exception_copy
        lea     rax, OFFSET FLAT:const std::bad_alloc::`vftable'
        mov     QWORD PTR [rbx], rax
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::bad_alloc::bad_alloc(std::bad_alloc const &) ENDP             ; std::bad_alloc::bad_alloc

this$ = 48
__that$ = 56
std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length const &) PROC        ; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN10:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rax, rdx
        lea     rcx, OFFSET FLAT:const std::exception::`vftable'
        xorps   xmm0, xmm0
        mov     QWORD PTR [rbx], rcx
        lea     rdx, QWORD PTR [rbx+8]
        lea     rcx, QWORD PTR [rax+8]
        movups  XMMWORD PTR [rdx], xmm0
        call    __std_exception_copy
        lea     rax, OFFSET FLAT:const std::bad_array_new_length::`vftable'
        mov     QWORD PTR [rbx], rax
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length const &) ENDP        ; std::bad_array_new_length::bad_array_new_length

this$ = 48
_Other$ = 56
std::exception::exception(std::exception const &) PROC             ; std::exception::exception, COMDAT
$LN5:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rax, rdx
        lea     rcx, OFFSET FLAT:const std::exception::`vftable'
        xorps   xmm0, xmm0
        mov     QWORD PTR [rbx], rcx
        lea     rdx, QWORD PTR [rbx+8]
        lea     rcx, QWORD PTR [rax+8]
        movups  XMMWORD PTR [rdx], xmm0
        call    __std_exception_copy
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::exception::exception(std::exception const &) ENDP             ; std::exception::exception

this$ = 48
__flags$ = 56
virtual void * std::bad_alloc::`scalar deleting destructor'(unsigned int) PROC           ; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN11:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     rdi, rcx
        mov     QWORD PTR [rcx], rax
        mov     ebx, edx
        add     rcx, 8
        call    __std_exception_destroy
        test    bl, 1
        je      SHORT $LN2@scalar
        mov     edx, 24
        mov     rcx, rdi
        call    void operator delete(void *,unsigned __int64)               ; operator delete
$LN2@scalar:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rax, rdi
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
virtual void * std::bad_alloc::`scalar deleting destructor'(unsigned int) ENDP           ; std::bad_alloc::`scalar deleting destructor'

this$ = 48
__flags$ = 56
virtual void * std::bad_array_new_length::`scalar deleting destructor'(unsigned int) PROC      ; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN14:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     rdi, rcx
        mov     QWORD PTR [rcx], rax
        mov     ebx, edx
        add     rcx, 8
        call    __std_exception_destroy
        test    bl, 1
        je      SHORT $LN2@scalar
        mov     edx, 24
        mov     rcx, rdi
        call    void operator delete(void *,unsigned __int64)               ; operator delete
$LN2@scalar:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rax, rdi
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
virtual void * std::bad_array_new_length::`scalar deleting destructor'(unsigned int) ENDP      ; std::bad_array_new_length::`scalar deleting destructor'

this$ = 48
__flags$ = 56
virtual void * std::exception::`scalar deleting destructor'(unsigned int) PROC           ; std::exception::`scalar deleting destructor', COMDAT
$LN8:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     rdi, rcx
        mov     QWORD PTR [rcx], rax
        mov     ebx, edx
        add     rcx, 8
        call    __std_exception_destroy
        test    bl, 1
        je      SHORT $LN2@scalar
        mov     edx, 24
        mov     rcx, rdi
        call    void operator delete(void *,unsigned __int64)               ; operator delete
$LN2@scalar:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rax, rdi
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
virtual void * std::exception::`scalar deleting destructor'(unsigned int) ENDP           ; std::exception::`scalar deleting destructor'

this$ = 8
virtual std::bad_alloc::~bad_alloc(void) PROC                      ; std::bad_alloc::~bad_alloc, COMDAT
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     QWORD PTR [rcx], rax
        add     rcx, 8
        jmp     __std_exception_destroy
virtual std::bad_alloc::~bad_alloc(void) ENDP                      ; std::bad_alloc::~bad_alloc

this$ = 8
virtual std::bad_array_new_length::~bad_array_new_length(void) PROC             ; std::bad_array_new_length::~bad_array_new_length, COMDAT
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     QWORD PTR [rcx], rax
        add     rcx, 8
        jmp     __std_exception_destroy
virtual std::bad_array_new_length::~bad_array_new_length(void) ENDP             ; std::bad_array_new_length::~bad_array_new_length

this$ = 8
virtual std::exception::~exception(void) PROC                      ; std::exception::~exception, COMDAT
        lea     rax, OFFSET FLAT:const std::exception::`vftable'
        mov     QWORD PTR [rcx], rax
        add     rcx, 8
        jmp     __std_exception_destroy
virtual std::exception::~exception(void) ENDP                      ; std::exception::~exception

this$ = 8
virtual char const * std::exception::what(void)const  PROC                    ; std::exception::what, COMDAT
        cmp     QWORD PTR [rcx+8], 0
        lea     rax, OFFSET FLAT:`string'
        cmovne  rax, QWORD PTR [rcx+8]
        ret     0
virtual char const * std::exception::what(void)const  ENDP                    ; std::exception::what

_Size$ = 8
_Where$ = 16
void * operator new(unsigned __int64,void *) PROC                       ; operator new, COMDAT
        mov     rax, rdx
        ret     0
void * operator new(unsigned __int64,void *) ENDP                       ; operator new

this$ = 8
_Parg$ = 16
_Pvector$ = 24
std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >(unsigned int *,std::_Container_base0 const *) PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        ret     0
std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >(unsigned int *,std::_Container_base0 const *) ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >

this$ = 8
__param0$ = 16
__param1$ = 24
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >(unsigned int *,std::_Container_base0 const *) PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >(unsigned int *,std::_Container_base0 const *) ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >

this$ = 8
__$ReturnUdt$ = 16
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::begin(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::begin, COMDAT
        mov     rax, QWORD PTR [rcx]
        mov     QWORD PTR [rdx], rax
        mov     rax, rdx
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::begin(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::begin

this$ = 8
__$ReturnUdt$ = 16
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::end(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::end, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        mov     QWORD PTR [rdx], rax
        mov     rax, rdx
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::end(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::end

this$ = 8
_Off$ = 16
void std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Verify_offset(__int64)const  PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Verify_offset, COMDAT
        ret     0
void std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Verify_offset(__int64)const  ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Verify_offset

this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+(__int64)const  PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+, COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rcx, QWORD PTR [rax+r8*4]
        mov     rax, rdx
        mov     QWORD PTR [rdx], rcx
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+(__int64)const  ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+

this$ = 8
_Off$ = 16
std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > & std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=(__int64) PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=, COMDAT
        mov     rax, rdx
        shl     rax, 2
        add     QWORD PTR [rcx], rax
        mov     rax, rcx
        ret     0
std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > & std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=(__int64) ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=

this$ = 8
_Off$ = 16
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > & std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=(__int64) PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=, COMDAT
        mov     rax, rdx
        shl     rax, 2
        add     QWORD PTR [rcx], rax
        mov     rax, rcx
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > & std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=(__int64) ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::operator+=

this$ = 8
std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >(void) PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >(void) ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >

this$ = 8
std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >(void) PROC ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >(void) ENDP ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >

this$ = 8
std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >(void) PROC ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >(void) ENDP ; std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >

_Ptr$ = 8
unsigned int * std::_Unfancy_maybe_null<unsigned int>(unsigned int *) PROC   ; std::_Unfancy_maybe_null<unsigned int>, COMDAT
        mov     rax, rcx
        ret     0
unsigned int * std::_Unfancy_maybe_null<unsigned int>(unsigned int *) ENDP   ; std::_Unfancy_maybe_null<unsigned int>

this$ = 48
_Count$ = 56
_Val$ = 64
void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>, COMDAT
$LN56:
        test    rdx, rdx
        je      $LN51@Construct_
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        mov     QWORD PTR [rsp+24], rdi
        push    r14
        sub     rsp, 32                             ; 00000020H
        xor     r9d, r9d
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        mov     r14, r8
        mov     rbx, rdx
        mov     rsi, rcx
        cmp     rdx, rax
        ja      SHORT $LN54@Construct_
        mov     rdi, rdx
        shl     rdi, 2
        cmp     rdi, 4096               ; 00001000H
        jb      SHORT $LN17@Construct_
        mov     rcx, rdi
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN52@Construct_
$LN17@Construct_:
        test    rdi, rdi
        je      SHORT $LN16@Construct_
        mov     rcx, rdi
        call    void * operator new(unsigned __int64)                      ; operator new
$LN52@Construct_:
        mov     r9, rax
$LN16@Construct_:
        mov     QWORD PTR [rsi], r9
        lea     rax, QWORD PTR [rdi+r9]
        mov     QWORD PTR [rsi+8], r9
        mov     QWORD PTR [rsi+16], rax
$LL30@Construct_:
        mov     eax, DWORD PTR [r14]
        mov     DWORD PTR [r9], eax
        add     r9, 4
        sub     rbx, 1
        jne     SHORT $LL30@Construct_
        mov     rbx, QWORD PTR [rsp+48]
        mov     rdi, QWORD PTR [rsp+64]
        mov     QWORD PTR [rsi+8], r9
        mov     rsi, QWORD PTR [rsp+56]
        add     rsp, 32                             ; 00000020H
        pop     r14
$LN51@Construct_:
        ret     0
$LN54@Construct_:
        call    static void std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength(void) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
        int     3
$LN50@Construct_:
void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>

this$ = 48
_Count$ = 56
_Val$ = 64
_Al$ = 72
std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >(unsigned __int64,unsigned int const &,std::allocator<unsigned int> const &) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT
$LN9:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        xor     eax, eax
        mov     rbx, rcx
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        call    void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >(unsigned __int64,unsigned int const &,std::allocator<unsigned int> const &) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >

this$ = 48
_First$ = 56
_Last$ = 64
__formal$ = 72
void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) PROC ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>, COMDAT
$LN42:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rbp
        mov     QWORD PTR [rsp+24], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, r8
        mov     rsi, r8
        sub     rax, rdx
        xor     r8d, r8d
        sar     rax, 2
        mov     rbp, rdx
        mov     rdi, rcx
        test    rax, rax
        je      SHORT $LN33@Range_cons
        mov     rcx, 4611686018427387903      ; 3fffffffffffffffH
        cmp     rax, rcx
        ja      SHORT $LN40@Range_cons
        mov     rbx, rax
        shl     rbx, 2
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN19@Range_cons
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN38@Range_cons
$LN19@Range_cons:
        test    rbx, rbx
        je      SHORT $LN18@Range_cons
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN38@Range_cons:
        mov     r8, rax
$LN18@Range_cons:
        mov     QWORD PTR [rdi], r8
        lea     rax, QWORD PTR [rbx+r8]
        mov     QWORD PTR [rdi+8], r8
        mov     r9, rdi
        mov     rdx, rsi
        mov     QWORD PTR [rdi+16], rax
        mov     rcx, rbp
        call    int * std::_Uninitialized_copy<int const *,std::allocator<int> >(int const * const,int const * const,int *,std::allocator<int> &) ; std::_Uninitialized_copy<int const *,std::allocator<int> >
        mov     QWORD PTR [rdi+8], rax
$LN33@Range_cons:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rbp, QWORD PTR [rsp+56]
        mov     rsi, QWORD PTR [rsp+64]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN40@Range_cons:
        call    static void std::vector<int,std::allocator<int> >::_Xlength(void) ; std::vector<int,std::allocator<int> >::_Xlength
        int     3
$LN37@Range_cons:
void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) ENDP ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>

this$ = 48
_Guard$1 = 56
_First$ = 56
_Last$ = 64
__formal$ = 72
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>, COMDAT
$LN37:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+24], rbp
        mov     QWORD PTR [rsp+32], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rsi, r8
        mov     rbp, rdx
        mov     rdi, rcx
        mov     r9, r8
        sub     r9, rdx
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        imul    r9
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rdx, rax
        je      SHORT $LN30@Range_cons
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        cmp     rdx, rax
        ja      SHORT $LN35@Range_cons
        lea     rbx, QWORD PTR [rdx+rdx*2]
        shl     rbx, 3
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN19@Range_cons
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN33@Range_cons
$LN19@Range_cons:
        xor     r8d, r8d
        test    rbx, rbx
        je      SHORT $LN18@Range_cons
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN33@Range_cons:
        mov     r8, rax
$LN18@Range_cons:
        mov     QWORD PTR [rdi], r8
        mov     QWORD PTR [rdi+8], r8
        lea     rax, QWORD PTR [rbx+r8]
        mov     QWORD PTR [rdi+16], rax
        mov     QWORD PTR _Guard$1[rsp], rdi
        mov     r9, rdi
        mov     rdx, rsi
        mov     rcx, rbp
        call    std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
        mov     QWORD PTR [rdi+8], rax
$LN30@Range_cons:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rbp, QWORD PTR [rsp+64]
        mov     rsi, QWORD PTR [rsp+72]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN35@Range_cons:
        call    static void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength
        int     3
$LN32@Range_cons:
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>
this$ = 48
_Guard$1 = 56
_First$ = 56
_Last$ = 64
__formal$ = 72
int `void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::forward_iterator_tag)'::`1'::dtor$0 PROC ; `std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>'::`1'::dtor$0
        lea     rcx, QWORD PTR _Guard$1[rdx]
        jmp     std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >(void) ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
int `void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::forward_iterator_tag)'::`1'::dtor$0 ENDP ; `std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>'::`1'::dtor$0

$T1 = 48
this$ = 48
_Ilist$ = 56
_Al$ = 64
std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::initializer_list<int>,std::allocator<int> const &) PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
$LN9:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     r8, QWORD PTR [rdx+8]
        xor     eax, eax
        mov     rdx, QWORD PTR [rdx]
        mov     rbx, rcx
        mov     r9b, BYTE PTR $T1[rsp]
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        call    void std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>(int const *,int const *,std::forward_iterator_tag) ; std::vector<int,std::allocator<int> >::_Range_construct_or_tidy<int const *>
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::initializer_list<int>,std::allocator<int> const &) ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >

$T1 = 48
this$ = 48
_Ilist$ = 56
_Al$ = 64
std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(std::initializer_list<std::vector<int,std::allocator<int> > >,std::allocator<std::vector<int,std::allocator<int> > > const &) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
$LN9:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     r8, QWORD PTR [rdx+8]
        xor     eax, eax
        mov     rdx, QWORD PTR [rdx]
        mov     rbx, rcx
        mov     r9b, BYTE PTR $T1[rsp]
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        call    void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::forward_iterator_tag) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(std::initializer_list<std::vector<int,std::allocator<int> > >,std::allocator<std::vector<int,std::allocator<int> > > const &) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >

this$ = 48
_Right$ = 56
std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::vector<int,std::allocator<int> > const &) PROC ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
$LN40:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rbp
        mov     QWORD PTR [rsp+24], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        xor     r8d, r8d
        mov     rbx, rcx
        mov     QWORD PTR [rcx], r8
        mov     QWORD PTR [rcx+8], r8
        mov     QWORD PTR [rcx+16], r8
        mov     rsi, QWORD PTR [rdx]
        mov     rbp, QWORD PTR [rdx+8]
        cmp     rsi, rbp
        je      SHORT $LN31@vector
        mov     rax, rbp
        mov     rcx, 4611686018427387903      ; 3fffffffffffffffH
        sub     rax, rsi
        sar     rax, 2
        cmp     rax, rcx
        ja      SHORT $LN38@vector
        mov     rdi, rax
        shl     rdi, 2
        cmp     rdi, 4096               ; 00001000H
        jb      SHORT $LN18@vector
        mov     rcx, rdi
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN36@vector
$LN18@vector:
        test    rdi, rdi
        je      SHORT $LN17@vector
        mov     rcx, rdi
        call    void * operator new(unsigned __int64)                      ; operator new
$LN36@vector:
        mov     r8, rax
$LN17@vector:
        mov     QWORD PTR [rbx], r8
        lea     rax, QWORD PTR [rdi+r8]
        mov     QWORD PTR [rbx+8], r8
        mov     r9, rbx
        mov     rdx, rbp
        mov     QWORD PTR [rbx+16], rax
        mov     rcx, rsi
        call    int * std::_Uninitialized_copy<int *,std::allocator<int> >(int * const,int * const,int *,std::allocator<int> &) ; std::_Uninitialized_copy<int *,std::allocator<int> >
        mov     QWORD PTR [rbx+8], rax
$LN31@vector:
        mov     rbp, QWORD PTR [rsp+56]
        mov     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     rsi, QWORD PTR [rsp+64]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN38@vector:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN35@vector:
std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::vector<int,std::allocator<int> > const &) ENDP ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >

this$ = 48
std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) PROC     ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
$LN10:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN4@vector
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN4@vector:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ENDP     ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >

this$ = 48
std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >(void) PROC     ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT
$LN10:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN4@vector
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN4@vector:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >(void) ENDP     ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >

this$ = 8
std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
        jmp     void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy
std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >

this$ = 48
__$ReturnUdt$ = 56
_First$ = 64
_Last$ = 72
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::erase, COMDAT
$LN12:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rsi, rdx
        mov     rdi, rcx
        mov     rdx, QWORD PTR [rcx+8]
        mov     rbx, r8
        mov     rcx, r9
        call    unsigned int * std::_Copy_memmove<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) ; std::_Copy_memmove<unsigned int *,unsigned int *>
        mov     QWORD PTR [rsi], rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+8], rax
        mov     rax, rsi
        mov     rsi, QWORD PTR [rsp+56]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > std::vector<unsigned int,std::allocator<unsigned int> >::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::erase

this$ = 8
unsigned int * std::vector<unsigned int,std::allocator<unsigned int> >::data(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::data, COMDAT
        mov     rax, QWORD PTR [rcx]
        ret     0
unsigned int * std::vector<unsigned int,std::allocator<unsigned int> >::data(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::data

this$ = 8
unsigned __int64 std::vector<unsigned int,std::allocator<unsigned int> >::size(void)const  PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::size, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        sub     rax, QWORD PTR [rcx]
        sar     rax, 2
        ret     0
unsigned __int64 std::vector<unsigned int,std::allocator<unsigned int> >::size(void)const  ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::size

this$ = 8
unsigned __int64 std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::size(void)const  PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::size, COMDAT
        mov     rdx, QWORD PTR [rcx+8]
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        sub     rdx, QWORD PTR [rcx]
        imul    rdx
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rax, rdx
        ret     0
unsigned __int64 std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::size(void)const  ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::size

this$ = 8
unsigned __int64 std::vector<int,std::allocator<int> >::max_size(void)const  PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        ret     0
unsigned __int64 std::vector<int,std::allocator<int> >::max_size(void)const  ENDP ; std::vector<int,std::allocator<int> >::max_size

this$ = 8
unsigned __int64 std::vector<unsigned int,std::allocator<unsigned int> >::max_size(void)const  PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size, COMDAT
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        ret     0
unsigned __int64 std::vector<unsigned int,std::allocator<unsigned int> >::max_size(void)const  ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size

this$ = 8
unsigned __int64 std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size(void)const  PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size, COMDAT
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        ret     0
unsigned __int64 std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size(void)const  ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::max_size

this$ = 8
_Pos$ = 16
int & std::vector<int,std::allocator<int> >::operator[](unsigned __int64) PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rax, QWORD PTR [rax+rdx*4]
        ret     0
int & std::vector<int,std::allocator<int> >::operator[](unsigned __int64) ENDP ; std::vector<int,std::allocator<int> >::operator[]

this$ = 8
_Pos$ = 16
unsigned int & std::vector<unsigned int,std::allocator<unsigned int> >::operator[](unsigned __int64) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rax, QWORD PTR [rax+rdx*4]
        ret     0
unsigned int & std::vector<unsigned int,std::allocator<unsigned int> >::operator[](unsigned __int64) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]

this$ = 8
_Pos$ = 16
std::vector<int,std::allocator<int> > & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[](unsigned __int64) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rdx, QWORD PTR [rdx+rdx*2]
        lea     rax, QWORD PTR [rax+rdx*8]
        ret     0
std::vector<int,std::allocator<int> > & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[](unsigned __int64) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[]

this$ = 8
_Pos$ = 16
int const & std::vector<int,std::allocator<int> >::operator[](unsigned __int64)const  PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rax, QWORD PTR [rax+rdx*4]
        ret     0
int const & std::vector<int,std::allocator<int> >::operator[](unsigned __int64)const  ENDP ; std::vector<int,std::allocator<int> >::operator[]

this$ = 8
_Pos$ = 16
std::vector<int,std::allocator<int> > const & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[](unsigned __int64)const  PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        lea     rdx, QWORD PTR [rdx+rdx*2]
        lea     rax, QWORD PTR [rax+rdx*8]
        ret     0
std::vector<int,std::allocator<int> > const & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[](unsigned __int64)const  ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::operator[]

this$ = 8
_First$ = 16
_Last$ = 24
_Dest$ = 32
int * std::vector<int,std::allocator<int> >::_Ucopy<int *>(int *,int *,int *) PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int *>, COMDAT
        mov     rax, r9
        mov     r10, r8
        mov     r11, rdx
        mov     r9, rcx
        mov     r8, rax
        mov     rdx, r10
        mov     rcx, r11
        jmp     int * std::_Uninitialized_copy<int *,std::allocator<int> >(int * const,int * const,int *,std::allocator<int> &) ; std::_Uninitialized_copy<int *,std::allocator<int> >
int * std::vector<int,std::allocator<int> >::_Ucopy<int *>(int *,int *,int *) ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int *>

this$ = 8
_First$ = 16
_Last$ = 24
_Dest$ = 32
int * std::vector<int,std::allocator<int> >::_Ucopy<int const *>(int const *,int const *,int *) PROC ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>, COMDAT
        mov     rax, r9
        mov     r10, r8
        mov     r11, rdx
        mov     r9, rcx
        mov     r8, rax
        mov     rdx, r10
        mov     rcx, r11
        jmp     int * std::_Uninitialized_copy<int const *,std::allocator<int> >(int const * const,int const * const,int *,std::allocator<int> &) ; std::_Uninitialized_copy<int const *,std::allocator<int> >
int * std::vector<int,std::allocator<int> >::_Ucopy<int const *>(int const *,int const *,int *) ENDP ; std::vector<int,std::allocator<int> >::_Ucopy<int const *>

this$ = 8
_First$ = 16
_Last$ = 24
_Dest$ = 32
std::vector<int,std::allocator<int> > * std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > *) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>, COMDAT
        mov     rax, r9
        mov     r10, r8
        mov     r11, rdx
        mov     r9, rcx
        mov     r8, rax
        mov     rdx, r10
        mov     rcx, r11
        jmp     std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
std::vector<int,std::allocator<int> > * std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > *) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Ucopy<std::vector<int,std::allocator<int> > const *>

this$ = 8
_First$ = 16
_Last$ = 24
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > *) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy, COMDAT
        mov     rax, r8
        mov     r9, rdx
        mov     r8, rcx
        mov     rdx, rax
        mov     rcx, r9
        jmp     void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > *) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Destroy

this$ = 8
_First$ = 16
_Last$ = 24
void std::vector<int,std::allocator<int> >::_Destroy(int *,int *) PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
        ret     0
void std::vector<int,std::allocator<int> >::_Destroy(int *,int *) ENDP ; std::vector<int,std::allocator<int> >::_Destroy

this$ = 8
_First$ = 16
_Last$ = 24
void std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy(unsigned int *,unsigned int *) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy, COMDAT
        ret     0
void std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy(unsigned int *,unsigned int *) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

this$ = 48
_Newcapacity$ = 56
void std::vector<int,std::allocator<int> >::_Buy_raw(unsigned __int64) PROC ; std::vector<int,std::allocator<int> >::_Buy_raw, COMDAT
$LN19:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN18@Buy_raw
        mov     rbx, rdx
        shl     rbx, 2
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN10@Buy_raw
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN9@Buy_raw
$LN10@Buy_raw:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN9@Buy_raw
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN9@Buy_raw:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN18@Buy_raw:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN16@Buy_raw:
void std::vector<int,std::allocator<int> >::_Buy_raw(unsigned __int64) ENDP ; std::vector<int,std::allocator<int> >::_Buy_raw

this$ = 48
_Newcapacity$ = 56
void std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw(unsigned __int64) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw, COMDAT
$LN19:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN18@Buy_raw
        mov     rbx, rdx
        shl     rbx, 2
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN10@Buy_raw
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN9@Buy_raw
$LN10@Buy_raw:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN9@Buy_raw
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN9@Buy_raw:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN18@Buy_raw:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN16@Buy_raw:
void std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw(unsigned __int64) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_raw

this$ = 48
_Newcapacity$ = 56
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw(unsigned __int64) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw, COMDAT
$LN19:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN18@Buy_raw
        lea     rbx, QWORD PTR [rdx+rdx*2]
        shl     rbx, 3
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN10@Buy_raw
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN9@Buy_raw
$LN10@Buy_raw:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN9@Buy_raw
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN9@Buy_raw:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN18@Buy_raw:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN16@Buy_raw:
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw(unsigned __int64) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_raw

this$ = 48
_Newcapacity$ = 56
void std::vector<int,std::allocator<int> >::_Buy_nonzero(unsigned __int64) PROC ; std::vector<int,std::allocator<int> >::_Buy_nonzero, COMDAT
$LN23:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN22@Buy_nonzer
        mov     rbx, rdx
        shl     rbx, 2
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN13@Buy_nonzer
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN12@Buy_nonzer
$LN13@Buy_nonzer:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN12@Buy_nonzer
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN12@Buy_nonzer:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN22@Buy_nonzer:
        call    static void std::vector<int,std::allocator<int> >::_Xlength(void) ; std::vector<int,std::allocator<int> >::_Xlength
        int     3
$LN20@Buy_nonzer:
void std::vector<int,std::allocator<int> >::_Buy_nonzero(unsigned __int64) ENDP ; std::vector<int,std::allocator<int> >::_Buy_nonzero

this$ = 48
_Newcapacity$ = 56
void std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_nonzero(unsigned __int64) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_nonzero, COMDAT
$LN23:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN22@Buy_nonzer
        mov     rbx, rdx
        shl     rbx, 2
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN13@Buy_nonzer
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN12@Buy_nonzer
$LN13@Buy_nonzer:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN12@Buy_nonzer
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN12@Buy_nonzer:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN22@Buy_nonzer:
        call    static void std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength(void) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
        int     3
$LN20@Buy_nonzer:
void std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_nonzero(unsigned __int64) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy_nonzero

this$ = 48
_Newcapacity$ = 56
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero(unsigned __int64) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero, COMDAT
$LN23:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN22@Buy_nonzer
        lea     rbx, QWORD PTR [rdx+rdx*2]
        shl     rbx, 3
        cmp     rbx, 4096               ; 00001000H
        jb      SHORT $LN13@Buy_nonzer
        mov     rcx, rbx
        call    void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
        jmp     SHORT $LN12@Buy_nonzer
$LN13@Buy_nonzer:
        xor     eax, eax
        test    rbx, rbx
        je      SHORT $LN12@Buy_nonzer
        mov     rcx, rbx
        call    void * operator new(unsigned __int64)                      ; operator new
$LN12@Buy_nonzer:
        mov     QWORD PTR [rdi], rax
        mov     QWORD PTR [rdi+8], rax
        add     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        mov     QWORD PTR [rdi+16], rax
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN22@Buy_nonzer:
        call    static void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength
        int     3
$LN20@Buy_nonzer:
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero(unsigned __int64) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Buy_nonzero

this$ = 48
void std::vector<int,std::allocator<int> >::_Tidy(void) PROC ; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
$LN8:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN2@Tidy
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN2@Tidy:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
void std::vector<int,std::allocator<int> >::_Tidy(void) ENDP ; std::vector<int,std::allocator<int> >::_Tidy

this$ = 48
void std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT
$LN8:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN2@Tidy
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN2@Tidy:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
void std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy

this$ = 48
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy(void) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy, COMDAT
$LN10:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN2@Tidy
        mov     rdx, QWORD PTR [rbx+8]
        mov     r8, rbx
        call    void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
        mov     rdx, QWORD PTR [rbx+16]
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        sub     rdx, QWORD PTR [rbx]
        mov     rcx, QWORD PTR [rbx]
        imul    rdx
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rdx, rax
        lea     rdx, QWORD PTR [rdx+rdx*2]
        shl     rdx, 3
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN2@Tidy:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy(void) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy

this$ = 48
__flags$ = 56
void * std::vector<int,std::allocator<int> >::`scalar deleting destructor'(unsigned int) PROC ; std::vector<int,std::allocator<int> >::`scalar deleting destructor', COMDAT
$LN13:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     edi, edx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN7@scalar
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN7@scalar:
        test    dil, 1
        je      SHORT $LN2@scalar
        mov     edx, 24
        mov     rcx, rbx
        call    void operator delete(void *,unsigned __int64)               ; operator delete
$LN2@scalar:
        mov     rax, rbx
        mov     rbx, QWORD PTR [rsp+48]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
void * std::vector<int,std::allocator<int> >::`scalar deleting destructor'(unsigned int) ENDP ; std::vector<int,std::allocator<int> >::`scalar deleting destructor'

static void std::vector<int,std::allocator<int> >::_Xlength(void) PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT
$LN4:
        sub     rsp, 40                             ; 00000028H
        lea     rcx, OFFSET FLAT:`string'
        call    void std::_Xlength_error(char const *)      ; std::_Xlength_error
        int     3
$LN3@Xlength:
static void std::vector<int,std::allocator<int> >::_Xlength(void) ENDP ; std::vector<int,std::allocator<int> >::_Xlength

static void std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength, COMDAT
$LN4:
        sub     rsp, 40                             ; 00000028H
        lea     rcx, OFFSET FLAT:`string'
        call    void std::_Xlength_error(char const *)      ; std::_Xlength_error
        int     3
$LN3@Xlength:
static void std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength

static void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength(void) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength, COMDAT
$LN4:
        sub     rsp, 40                             ; 00000028H
        lea     rcx, OFFSET FLAT:`string'
        call    void std::_Xlength_error(char const *)      ; std::_Xlength_error
        int     3
$LN3@Xlength:
static void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength(void) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Xlength

this$ = 8
_Dest$ = 16
_Count$ = 24
_Val$ = 32
unsigned int * std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill(unsigned int *,unsigned __int64,unsigned int const &) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill, COMDAT
        test    r8, r8
        je      SHORT $LN5@Ufill
$LL6@Ufill:
        mov     ecx, DWORD PTR [r9]
        mov     DWORD PTR [rdx], ecx
        add     rdx, 4
        sub     r8, 1
        jne     SHORT $LL6@Ufill
$LN5@Ufill:
        mov     rax, rdx
        ret     0
unsigned int * std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill(unsigned int *,unsigned __int64,unsigned int const &) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill

this$ = 8
_First$ = 16
_Last$ = 24
void std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range(unsigned int *,unsigned int *)const  PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range, COMDAT
        ret     0
void std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range(unsigned int *,unsigned int *)const  ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

this$ = 8
std::allocator<int> & std::vector<int,std::allocator<int> >::_Getal(void) PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> & std::vector<int,std::allocator<int> >::_Getal(void) ENDP ; std::vector<int,std::allocator<int> >::_Getal

this$ = 8
std::allocator<unsigned int> & std::vector<unsigned int,std::allocator<unsigned int> >::_Getal(void) PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int> & std::vector<unsigned int,std::allocator<unsigned int> >::_Getal(void) ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal

this$ = 8
std::allocator<std::vector<int,std::allocator<int> > > & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal(void) PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > > & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal(void) ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal

this$ = 8
std::allocator<int> const & std::vector<int,std::allocator<int> >::_Getal(void)const  PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> const & std::vector<int,std::allocator<int> >::_Getal(void)const  ENDP ; std::vector<int,std::allocator<int> >::_Getal

this$ = 8
std::allocator<unsigned int> const & std::vector<unsigned int,std::allocator<unsigned int> >::_Getal(void)const  PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int> const & std::vector<unsigned int,std::allocator<unsigned int> >::_Getal(void)const  ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal

this$ = 8
std::allocator<std::vector<int,std::allocator<int> > > const & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal(void)const  PROC ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > > const & std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal(void)const  ENDP ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Getal

this$ = 8
_Ptr$ = 16
_Mypvbool$ = 24
std::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,std::_Container_base0 const *) PROC ; std::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT
        and     QWORD PTR [rcx+8], 0
        mov     rax, rcx
        mov     QWORD PTR [rcx], rdx
        ret     0
std::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,std::_Container_base0 const *) ENDP ; std::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_const_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >

this$ = 8
_Ptr$ = 16
_Off$ = 24
_Mypvbool$ = 32
std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,unsigned __int64,std::_Container_base0 const *) PROC ; std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], r8
        ret     0
std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,unsigned __int64,std::_Container_base0 const *) ENDP ; std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >

this$ = 8
__param0$ = 16
__param1$ = 24
std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,std::_Container_base0 const *) PROC ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT
        and     QWORD PTR [rcx+8], 0
        mov     rax, rcx
        mov     QWORD PTR [rcx], rdx
        ret     0
std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >(unsigned int const *,std::_Container_base0 const *) ENDP ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >

this$ = 8
_Right$ = 16
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >(std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > > const &) PROC ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT
        mov     rax, QWORD PTR [rdx]
        mov     r8, QWORD PTR [rdx+8]
        mov     QWORD PTR [rcx], rax
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], r8
        ret     0
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >(std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > > const &) ENDP ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >

this$ = 8
__$ReturnUdt$ = 16
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator*(void)const  PROC ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator*, COMDAT
        mov     rax, QWORD PTR [rcx]
        mov     QWORD PTR [rdx], rax
        mov     rax, QWORD PTR [rcx+8]
        mov     QWORD PTR [rdx+8], rax
        mov     rax, rdx
        ret     0
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator*(void)const  ENDP ; std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator*

this$ = 8
__$ReturnUdt$ = 16
std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > std::vector<bool,std::allocator<bool> >::begin(void) PROC ; std::vector<bool,std::allocator<bool> >::begin, COMDAT
        mov     rax, QWORD PTR [rcx]
        and     QWORD PTR [rdx+8], 0
        mov     QWORD PTR [rdx], rax
        mov     rax, rdx
        ret     0
std::_Vb_iterator<std::_Wrap_alloc<std::allocator<unsigned int> > > std::vector<bool,std::allocator<bool> >::begin(void) ENDP ; std::vector<bool,std::allocator<bool> >::begin

this$ = 8
_Off$ = 16
void std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Advance(unsigned __int64) PROC ; std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Advance, COMDAT
        mov     r8, QWORD PTR [rcx+8]
        add     r8, rdx
        mov     rax, r8
        and     r8d, 31
        shr     rax, 5
        shl     rax, 2
        add     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], r8
        ret     0
void std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Advance(unsigned __int64) ENDP ; std::_Vb_iter_base<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Advance

this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > std::vector<bool,std::allocator<bool> >::operator[](unsigned __int64) PROC ; std::vector<bool,std::allocator<bool> >::operator[], COMDAT
        mov     rax, QWORD PTR [rcx]
        mov     r9, r8
        shr     r9, 5
        and     r8d, 31
        mov     QWORD PTR [rdx+8], r8
        lea     rcx, QWORD PTR [rax+r9*4]
        mov     rax, rdx
        mov     QWORD PTR [rdx], rcx
        ret     0
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > std::vector<bool,std::allocator<bool> >::operator[](unsigned __int64) ENDP ; std::vector<bool,std::allocator<bool> >::operator[]

this$ = 8
_Val$ = 16
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > & std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator=(bool) PROC ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator=, COMDAT
        mov     r8, QWORD PTR [rcx]
        mov     r9d, DWORD PTR [rcx+8]
        mov     eax, DWORD PTR [r8]
        test    dl, dl
        je      SHORT $LN2@operator
        bts     eax, r9d
        jmp     SHORT $LN3@operator
$LN2@operator:
        btr     eax, r9d
$LN3@operator:
        mov     DWORD PTR [r8], eax
        mov     rax, rcx
        ret     0
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > > & std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator=(bool) ENDP ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator=

this$ = 8
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator bool(void)const  PROC ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator bool, COMDAT
        mov     rax, QWORD PTR [rcx]
        mov     edx, 1
        mov     rcx, QWORD PTR [rcx+8]
        shl     edx, cl
        test    edx, DWORD PTR [rax]
        setne   al
        ret     0
std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator bool(void)const  ENDP ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::operator bool

this$ = 8
unsigned int const * std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Getptr(void)const  PROC ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Getptr, COMDAT
        mov     rax, QWORD PTR [rcx]
        ret     0
unsigned int const * std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Getptr(void)const  ENDP ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Getptr

this$ = 8
unsigned int std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Mask(void)const  PROC ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Mask, COMDAT
        mov     rcx, QWORD PTR [rcx+8]
        mov     eax, 1
        shl     eax, cl
        ret     0
unsigned int std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Mask(void)const  ENDP ; std::_Vb_reference<std::_Wrap_alloc<std::allocator<unsigned int> > >::_Mask

$T1 = 48
this$ = 48
_Count$ = 56
_Val$ = 64
_Al$ = 72
std::_Vb_val<std::allocator<bool> >::_Vb_val<std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) PROC ; std::_Vb_val<std::allocator<bool> >::_Vb_val<std::allocator<bool> >, COMDAT
$LN14:
        mov     QWORD PTR [rsp+8], rcx
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     al, BYTE PTR [r8]
        mov     rbx, rcx
        neg     al
        sbb     r8d, r8d
        and     QWORD PTR [rcx], 0
        and     QWORD PTR [rcx+8], 0
        add     rdx, 31
        and     QWORD PTR [rcx+16], 0
        mov     DWORD PTR $T1[rsp], r8d
        lea     r8, QWORD PTR $T1[rsp]
        shr     rdx, 5
        call    void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>
        and     QWORD PTR [rbx+24], 0
        mov     rax, rbx
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::_Vb_val<std::allocator<bool> >::_Vb_val<std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) ENDP ; std::_Vb_val<std::allocator<bool> >::_Vb_val<std::allocator<bool> >

this$ = 48
std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) PROC    ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >, COMDAT
$LN12:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN6@Vb_val
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN6@Vb_val:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) ENDP    ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >

_Count$ = 8
static unsigned __int64 std::_Vb_val<std::allocator<bool> >::_Nw(unsigned __int64) PROC ; std::_Vb_val<std::allocator<bool> >::_Nw, COMDAT
        lea     rax, QWORD PTR [rcx+31]
        shr     rax, 5
        ret     0
static unsigned __int64 std::_Vb_val<std::allocator<bool> >::_Nw(unsigned __int64) ENDP ; std::_Vb_val<std::allocator<bool> >::_Nw

this$ = 48
_Count$ = 56
_Val$ = 64
_Al$ = 72
std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) PROC ; std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >, COMDAT
$LN17:
        mov     r11, rsp
        mov     QWORD PTR [r11+24], rbx
        mov     QWORD PTR [r11+8], rcx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rdx
        mov     rdi, rcx
        mov     al, BYTE PTR [r8]
        neg     al
        sbb     r8d, r8d
        mov     DWORD PTR [r11+16], r8d
        and     QWORD PTR [rcx], 0
        and     QWORD PTR [rcx+8], 0
        and     QWORD PTR [rcx+16], 0
        add     rdx, 31
        shr     rdx, 5
        lea     r8, QWORD PTR [r11+16]
        call    void std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>(unsigned __int64,unsigned int const &) ; std::vector<unsigned int,std::allocator<unsigned int> >::_Construct_n_copies_of_ty<unsigned int>
        and     QWORD PTR [rdi+24], 0
        mov     rdx, rbx
        mov     rcx, rdi
        call    void std::vector<bool,std::allocator<bool> >::_Trim(unsigned __int64) ; std::vector<bool,std::allocator<bool> >::_Trim
        npad    1
        mov     rax, rdi
        mov     rbx, QWORD PTR [rsp+64]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,std::allocator<bool> const &) ENDP ; std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >
this$ = 48
_Count$ = 56
_Val$ = 64
_Al$ = 72
int `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,vector<bool,std::allocator<bool> >::allocator<bool> const &)'::`1'::dtor$0 PROC ; `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >'::`1'::dtor$0
        mov     rcx, QWORD PTR this$[rdx]
        jmp     std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >
int `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,vector<bool,std::allocator<bool> >::allocator<bool> const &)'::`1'::dtor$0 ENDP ; `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >'::`1'::dtor$0

this$ = 48
std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >(void) PROC   ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >, COMDAT
$LN15:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN9@vector
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN9@vector:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >(void) ENDP   ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >

this$ = 8
unsigned __int64 std::vector<bool,std::allocator<bool> >::max_size(void)const  PROC ; std::vector<bool,std::allocator<bool> >::max_size, COMDAT
        mov     rax, 9223372036854775807      ; 7fffffffffffffffH
        ret     0
unsigned __int64 std::vector<bool,std::allocator<bool> >::max_size(void)const  ENDP ; std::vector<bool,std::allocator<bool> >::max_size

this$ = 48
_Size$ = 56
void std::vector<bool,std::allocator<bool> >::_Trim(unsigned __int64) PROC ; std::vector<bool,std::allocator<bool> >::_Trim, COMDAT
$LN43:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rax, 9223372036854775807      ; 7fffffffffffffffH
        mov     rbx, rdx
        mov     rdi, rcx
        cmp     rdx, rax
        ja      SHORT $LN41@Trim
        mov     rcx, QWORD PTR [rcx+8]
        lea     rsi, QWORD PTR [rdx+31]
        mov     rax, QWORD PTR [rdi]
        mov     rdx, rcx
        sub     rdx, rax
        shr     rsi, 5
        sar     rdx, 2
        cmp     rsi, rdx
        jae     SHORT $LN36@Trim
        lea     r8, QWORD PTR [rax+rsi*4]
        mov     rdx, rcx
        call    unsigned int * std::_Copy_memmove<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) ; std::_Copy_memmove<unsigned int *,unsigned int *>
        mov     QWORD PTR [rdi+8], rax
$LN36@Trim:
        mov     QWORD PTR [rdi+24], rbx
        and     ebx, 31
        jbe     SHORT $LN4@Trim
        mov     rdx, QWORD PTR [rdi]
        mov     ecx, ebx
        mov     eax, 1
        shl     eax, cl
        dec     eax
        and     DWORD PTR [rdx+rsi*4-4], eax
$LN4@Trim:
        mov     rbx, QWORD PTR [rsp+48]
        mov     rsi, QWORD PTR [rsp+56]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
$LN41@Trim:
        call    void std::vector<bool,std::allocator<bool> >::_Xlen(void)const  ; std::vector<bool,std::allocator<bool> >::_Xlen
        int     3
$LN39@Trim:
void std::vector<bool,std::allocator<bool> >::_Trim(unsigned __int64) ENDP ; std::vector<bool,std::allocator<bool> >::_Trim

this$ = 48
void std::vector<bool,std::allocator<bool> >::_Xlen(void)const  PROC ; std::vector<bool,std::allocator<bool> >::_Xlen, COMDAT
$LN4:
        sub     rsp, 40                             ; 00000028H
        lea     rcx, OFFSET FLAT:`string'
        call    void std::_Xlength_error(char const *)      ; std::_Xlength_error
        int     3
$LN3@Xlen:
void std::vector<bool,std::allocator<bool> >::_Xlen(void)const  ENDP ; std::vector<bool,std::allocator<bool> >::_Xlen

_Count$ = 48
unsigned __int64 std::_Get_size_of_n<4>(unsigned __int64) PROC                ; std::_Get_size_of_n<4>, COMDAT
$LN7:
        sub     rsp, 40                             ; 00000028H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        cmp     rcx, rax
        ja      SHORT $LN6@Get_size_o
        mov     rax, rcx
        shl     rax, 2
        add     rsp, 40                             ; 00000028H
        ret     0
$LN6@Get_size_o:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN4@Get_size_o:
unsigned __int64 std::_Get_size_of_n<4>(unsigned __int64) ENDP                ; std::_Get_size_of_n<4>

_Count$ = 48
unsigned __int64 std::_Get_size_of_n<24>(unsigned __int64) PROC          ; std::_Get_size_of_n<24>, COMDAT
$LN7:
        sub     rsp, 40                             ; 00000028H
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        cmp     rcx, rax
        ja      SHORT $LN6@Get_size_o
        lea     rax, QWORD PTR [rcx+rcx*2]
        shl     rax, 3
        add     rsp, 40                             ; 00000028H
        ret     0
$LN6@Get_size_o:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN4@Get_size_o:
unsigned __int64 std::_Get_size_of_n<24>(unsigned __int64) ENDP          ; std::_Get_size_of_n<24>

_Bytes$ = 8
static void * std::_Default_allocate_traits::_Allocate(unsigned __int64) PROC ; std::_Default_allocate_traits::_Allocate, COMDAT
        jmp     void * operator new(unsigned __int64)                            ; operator new
static void * std::_Default_allocate_traits::_Allocate(unsigned __int64) ENDP ; std::_Default_allocate_traits::_Allocate

_Bytes$ = 48
void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT
$LN17:
        sub     rsp, 40                             ; 00000028H
        lea     rax, QWORD PTR [rcx+39]
        cmp     rax, rcx
        jbe     SHORT $LN16@Allocate_m
        mov     rcx, rax
        call    void * operator new(unsigned __int64)                      ; operator new
        mov     rcx, rax
        test    rax, rax
        je      SHORT $LN7@Allocate_m
        add     rax, 39                             ; 00000027H
        and     rax, -32                      ; ffffffffffffffe0H
        mov     QWORD PTR [rax-8], rcx
        add     rsp, 40                             ; 00000028H
        ret     0
$LN7@Allocate_m:
        call    _invalid_parameter_noinfo_noreturn
        int     3
$LN16@Allocate_m:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN14@Allocate_m:
void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>

_Ptr$ = 48
_Bytes$ = 56
void std::_Adjust_manually_vector_aligned(void * &,unsigned __int64 &) PROC ; std::_Adjust_manually_vector_aligned, COMDAT
$LN13:
        sub     rsp, 40                             ; 00000028H
        add     QWORD PTR [rdx], 39                 ; 00000027H
        mov     rax, QWORD PTR [rcx]
        mov     rdx, QWORD PTR [rax-8]
        sub     rax, rdx
        add     rax, -8
        cmp     rax, 31
        ja      SHORT $LN7@Adjust_man
        mov     QWORD PTR [rcx], rdx
        add     rsp, 40                             ; 00000028H
        ret     0
$LN7@Adjust_man:
        call    _invalid_parameter_noinfo_noreturn
        int     3
$LN11@Adjust_man:
void std::_Adjust_manually_vector_aligned(void * &,unsigned __int64 &) ENDP ; std::_Adjust_manually_vector_aligned

_Bytes$ = 8
void * std::_Allocate<16,std::_Default_allocate_traits,0>(unsigned __int64) PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT
        cmp     rcx, 4096               ; 00001000H
        jae     void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:
        test    rcx, rcx
        jne     void * operator new(unsigned __int64)                            ; operator new
$LN3@Allocate:
        xor     eax, eax
        ret     0
void * std::_Allocate<16,std::_Default_allocate_traits,0>(unsigned __int64) ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>

_Ptr$ = 48
_Bytes$ = 56
void std::_Deallocate<16,0>(void *,unsigned __int64) PROC      ; std::_Deallocate<16,0>, COMDAT
$LN18:
        sub     rsp, 40                             ; 00000028H
        cmp     rdx, 4096               ; 00001000H
        jb      SHORT $LN13@Deallocate
        mov     r8, QWORD PTR [rcx-8]
        add     rdx, 39                             ; 00000027H
        sub     rcx, r8
        lea     rax, QWORD PTR [rcx-8]
        cmp     rax, 31
        ja      SHORT $LN10@Deallocate
        mov     rcx, r8
$LN13@Deallocate:
        add     rsp, 40                             ; 00000028H
        jmp     void operator delete(void *,unsigned __int64)                     ; operator delete
$LN10@Deallocate:
        call    _invalid_parameter_noinfo_noreturn
        int     3
$LN15@Deallocate:
void std::_Deallocate<16,0>(void *,unsigned __int64) ENDP      ; std::_Deallocate<16,0>

this$ = 8
__formal$ = 16
_Val1$ = 24
std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>(std::_One_then_variadic_args_t,std::allocator<int> const &) PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>(std::_One_then_variadic_args_t,std::allocator<int> const &) ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> const &>

this$ = 8
__formal$ = 16
_Val1$ = 24
std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::allocator<unsigned int> const &>(std::_One_then_variadic_args_t,std::allocator<unsigned int> const &) PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::allocator<unsigned int> const &>, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::allocator<unsigned int> const &>(std::_One_then_variadic_args_t,std::allocator<unsigned int> const &) ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::allocator<unsigned int> const &>

this$ = 8
__formal$ = 16
_Val1$ = 24
std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>(std::_One_then_variadic_args_t,std::allocator<std::vector<int,std::allocator<int> > > const &) PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>(std::_One_then_variadic_args_t,std::allocator<std::vector<int,std::allocator<int> > > const &) ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1><std::allocator<std::vector<int,std::allocator<int> > > const &>

this$ = 8
__formal$ = 16
_Val1$ = 24
std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >(std::_One_then_variadic_args_t,std::allocator<int> &&) PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >, COMDAT
        xor     eax, eax
        mov     QWORD PTR [rcx], rax
        mov     QWORD PTR [rcx+8], rax
        mov     QWORD PTR [rcx+16], rax
        mov     rax, rcx
        ret     0
std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >(std::_One_then_variadic_args_t,std::allocator<int> &&) ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><std::allocator<int> >

__formal$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
static void std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>(std::allocator<std::vector<int,std::allocator<int> > > &,std::vector<int,std::allocator<int> > * const,std::vector<int,std::allocator<int> > const &) PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>, COMDAT
        mov     rcx, rdx
        mov     rdx, r8
        jmp     std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::vector<int,std::allocator<int> > const &) ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
static void std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>(std::allocator<std::vector<int,std::allocator<int> > > &,std::vector<int,std::allocator<int> > * const,std::vector<int,std::allocator<int> > const &) ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::construct<std::vector<int,std::allocator<int> >,std::vector<int,std::allocator<int> > const &>

__formal$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
static void std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const &>(std::allocator<unsigned int> &,unsigned int * const,unsigned int const &) PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const &>, COMDAT
        mov     eax, DWORD PTR [r8]
        mov     DWORD PTR [rdx], eax
        ret     0
static void std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const &>(std::allocator<unsigned int> &,unsigned int * const,unsigned int const &) ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const &>

__formal$ = 48
_Ptr$ = 56
static void std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >(std::allocator<std::vector<int,std::allocator<int> > > &,std::vector<int,std::allocator<int> > * const) PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >, COMDAT
$LN15:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rcx, QWORD PTR [rdx]
        mov     rbx, rdx
        test    rcx, rcx
        je      SHORT $LN9@destroy
        mov     rdx, QWORD PTR [rdx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN9@destroy:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
static void std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >(std::allocator<std::vector<int,std::allocator<int> > > &,std::vector<int,std::allocator<int> > * const) ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::destroy<std::vector<int,std::allocator<int> > >

__formal$ = 8
static unsigned __int64 std::_Default_allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const &) PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        ret     0
static unsigned __int64 std::_Default_allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const &) ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size

__formal$ = 8
static unsigned __int64 std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const &) PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size, COMDAT
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        ret     0
static unsigned __int64 std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size(std::allocator<unsigned int> const &) ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size

__formal$ = 8
static unsigned __int64 std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size(std::allocator<std::vector<int,std::allocator<int> > > const &) PROC ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size, COMDAT
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        ret     0
static unsigned __int64 std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size(std::allocator<std::vector<int,std::allocator<int> > > const &) ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<int,std::allocator<int> > > >::max_size

__$ReturnUdt$ = 8
_Al$ = 16
static std::allocator<int> std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const &) PROC ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction, COMDAT
        mov     rax, rcx
        ret     0
static std::allocator<int> std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const &) ENDP ; std::_Default_allocator_traits<std::allocator<int> >::select_on_container_copy_construction

this$ = 8
std::allocator<bool>::allocator<bool>(void) PROC           ; std::allocator<bool>::allocator<bool>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<bool>::allocator<bool>(void) ENDP           ; std::allocator<bool>::allocator<bool>

this$ = 8
std::allocator<int>::allocator<int>(void) PROC                  ; std::allocator<int>::allocator<int>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int>::allocator<int>(void) ENDP                  ; std::allocator<int>::allocator<int>

this$ = 8
std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >(void) PROC ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >(void) ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::allocator<std::vector<int,std::allocator<int> > >

this$ = 8
__formal$ = 16
std::allocator<unsigned int>::allocator<unsigned int><bool>(std::allocator<bool> const &) PROC ; std::allocator<unsigned int>::allocator<unsigned int><bool>, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int>::allocator<unsigned int><bool>(std::allocator<bool> const &) ENDP ; std::allocator<unsigned int>::allocator<unsigned int><bool>

this$ = 8
_Ptr$ = 16
_Count$ = 24
void std::allocator<int>::deallocate(int * const,unsigned __int64) PROC       ; std::allocator<int>::deallocate, COMDAT
        mov     rcx, rdx
        mov     rdx, r8
        shl     rdx, 2
        jmp     void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
void std::allocator<int>::deallocate(int * const,unsigned __int64) ENDP       ; std::allocator<int>::deallocate

this$ = 8
_Ptr$ = 16
_Count$ = 24
void std::allocator<unsigned int>::deallocate(unsigned int * const,unsigned __int64) PROC       ; std::allocator<unsigned int>::deallocate, COMDAT
        mov     rcx, rdx
        mov     rdx, r8
        shl     rdx, 2
        jmp     void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
void std::allocator<unsigned int>::deallocate(unsigned int * const,unsigned __int64) ENDP       ; std::allocator<unsigned int>::deallocate

this$ = 8
_Ptr$ = 16
_Count$ = 24
void std::allocator<std::vector<int,std::allocator<int> > >::deallocate(std::vector<int,std::allocator<int> > * const,unsigned __int64) PROC ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate, COMDAT
        mov     rcx, rdx
        lea     rdx, QWORD PTR [r8+r8*2]
        shl     rdx, 3
        jmp     void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
void std::allocator<std::vector<int,std::allocator<int> > >::deallocate(std::vector<int,std::allocator<int> > * const,unsigned __int64) ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::deallocate

this$ = 48
_Count$ = 56
int * std::allocator<int>::allocate(unsigned __int64) PROC      ; std::allocator<int>::allocate, COMDAT
$LN16:
        sub     rsp, 40                             ; 00000028H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        cmp     rdx, rax
        ja      SHORT $LN15@allocate
        mov     rcx, rdx
        shl     rcx, 2
        cmp     rcx, 4096               ; 00001000H
        jb      SHORT $LN8@allocate
        add     rsp, 40                             ; 00000028H
        jmp     void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN8@allocate:
        xor     eax, eax
        test    rcx, rcx
        je      SHORT $LN7@allocate
        call    void * operator new(unsigned __int64)                      ; operator new
$LN7@allocate:
        add     rsp, 40                             ; 00000028H
        ret     0
$LN15@allocate:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN13@allocate:
int * std::allocator<int>::allocate(unsigned __int64) ENDP      ; std::allocator<int>::allocate

this$ = 48
_Count$ = 56
unsigned int * std::allocator<unsigned int>::allocate(unsigned __int64) PROC      ; std::allocator<unsigned int>::allocate, COMDAT
$LN16:
        sub     rsp, 40                             ; 00000028H
        mov     rax, 4611686018427387903      ; 3fffffffffffffffH
        cmp     rdx, rax
        ja      SHORT $LN15@allocate
        mov     rcx, rdx
        shl     rcx, 2
        cmp     rcx, 4096               ; 00001000H
        jb      SHORT $LN8@allocate
        add     rsp, 40                             ; 00000028H
        jmp     void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN8@allocate:
        xor     eax, eax
        test    rcx, rcx
        je      SHORT $LN7@allocate
        call    void * operator new(unsigned __int64)                      ; operator new
$LN7@allocate:
        add     rsp, 40                             ; 00000028H
        ret     0
$LN15@allocate:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN13@allocate:
unsigned int * std::allocator<unsigned int>::allocate(unsigned __int64) ENDP      ; std::allocator<unsigned int>::allocate

this$ = 48
_Count$ = 56
std::vector<int,std::allocator<int> > * std::allocator<std::vector<int,std::allocator<int> > >::allocate(unsigned __int64) PROC ; std::allocator<std::vector<int,std::allocator<int> > >::allocate, COMDAT
$LN16:
        sub     rsp, 40                             ; 00000028H
        mov     rax, 768614336404564650             ; 0aaaaaaaaaaaaaaaH
        cmp     rdx, rax
        ja      SHORT $LN15@allocate
        lea     rcx, QWORD PTR [rdx+rdx*2]
        shl     rcx, 3
        cmp     rcx, 4096               ; 00001000H
        jb      SHORT $LN8@allocate
        add     rsp, 40                             ; 00000028H
        jmp     void * std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>(unsigned __int64) ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN8@allocate:
        xor     eax, eax
        test    rcx, rcx
        je      SHORT $LN7@allocate
        call    void * operator new(unsigned __int64)                      ; operator new
$LN7@allocate:
        add     rsp, 40                             ; 00000028H
        ret     0
$LN15@allocate:
        call    void std::_Throw_bad_array_new_length(void) ; std::_Throw_bad_array_new_length
        int     3
$LN13@allocate:
std::vector<int,std::allocator<int> > * std::allocator<std::vector<int,std::allocator<int> > >::allocate(unsigned __int64) ENDP ; std::allocator<std::vector<int,std::allocator<int> > >::allocate

_First$ = 48
_Last$ = 56
_Al$ = 64
void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) PROC ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
$LN25:
        cmp     rcx, rdx
        je      SHORT $LN22@Destroy_ra
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rdi, rdx
        mov     rbx, rcx
$LL4@Destroy_ra:
        mov     rcx, QWORD PTR [rbx]
        test    rcx, rcx
        je      SHORT $LN14@Destroy_ra
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN14@Destroy_ra:
        add     rbx, 24
        cmp     rbx, rdi
        jne     SHORT $LL4@Destroy_ra
        mov     rbx, QWORD PTR [rsp+48]
        add     rsp, 32                             ; 00000020H
        pop     rdi
$LN22@Destroy_ra:
        ret     0
void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) ENDP ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >

_First$ = 8
_Last$ = 16
_Al$ = 24
void std::_Destroy_range<std::allocator<int> >(int *,int * const,std::allocator<int> &) PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT
        ret     0
void std::_Destroy_range<std::allocator<int> >(int *,int * const,std::allocator<int> &) ENDP ; std::_Destroy_range<std::allocator<int> >

_First$ = 8
_Last$ = 16
_Al$ = 24
void std::_Destroy_range<std::allocator<unsigned int> >(unsigned int *,unsigned int * const,std::allocator<unsigned int> &) PROC ; std::_Destroy_range<std::allocator<unsigned int> >, COMDAT
        ret     0
void std::_Destroy_range<std::allocator<unsigned int> >(unsigned int *,unsigned int * const,std::allocator<unsigned int> &) ENDP ; std::_Destroy_range<std::allocator<unsigned int> >

_Len$ = 8
unsigned __int64 std::_Convert_size<unsigned __int64>(unsigned __int64) PROC              ; std::_Convert_size<unsigned __int64>, COMDAT
        mov     rax, rcx
        ret     0
unsigned __int64 std::_Convert_size<unsigned __int64>(unsigned __int64) ENDP              ; std::_Convert_size<unsigned __int64>

this$ = 8
void std::_Container_base0::_Orphan_all(void) PROC   ; std::_Container_base0::_Orphan_all, COMDAT
        ret     0
void std::_Container_base0::_Orphan_all(void) ENDP   ; std::_Container_base0::_Orphan_all

this$ = 8
__formal$ = 16
void std::_Container_base0::_Alloc_proxy(std::_Fake_allocator const &) PROC ; std::_Container_base0::_Alloc_proxy, COMDAT
        ret     0
void std::_Container_base0::_Alloc_proxy(std::_Fake_allocator const &) ENDP ; std::_Container_base0::_Alloc_proxy

this$ = 8
__formal$ = 16
void std::_Iterator_base0::_Adopt(void const *) PROC         ; std::_Iterator_base0::_Adopt, COMDAT
        ret     0
void std::_Iterator_base0::_Adopt(void const *) ENDP         ; std::_Iterator_base0::_Adopt

this$ = 8
std::_Container_base0 const * std::_Iterator_base0::_Getcont(void)const  PROC ; std::_Iterator_base0::_Getcont, COMDAT
        xor     eax, eax
        ret     0
std::_Container_base0 const * std::_Iterator_base0::_Getcont(void)const  ENDP ; std::_Iterator_base0::_Getcont

this$ = 8
__formal$ = 16
__formal$ = 24
std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl(std::_Fake_allocator const &,std::_Container_base0 const &) PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT
        mov     rax, rcx
        ret     0
std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl(std::_Fake_allocator const &,std::_Container_base0 const &) ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

this$ = 8
void std::_Fake_proxy_ptr_impl::_Release(void) PROC        ; std::_Fake_proxy_ptr_impl::_Release, COMDAT
        ret     0
void std::_Fake_proxy_ptr_impl::_Release(void) ENDP        ; std::_Fake_proxy_ptr_impl::_Release

this$ = 8
std::allocator<int> & std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first(void) PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> & std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first(void) ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

this$ = 8
std::allocator<unsigned int> & std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first(void) PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int> & std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first(void) ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

this$ = 8
std::allocator<std::vector<int,std::allocator<int> > > & std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first(void) PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > > & std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first(void) ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first

this$ = 8
std::allocator<int> const & std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first(void)const  PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<int> const & std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first(void)const  ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

this$ = 8
std::allocator<unsigned int> const & std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first(void)const  PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<unsigned int> const & std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first(void)const  ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

this$ = 8
std::allocator<std::vector<int,std::allocator<int> > > const & std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first(void)const  PROC ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first, COMDAT
        mov     rax, rcx
        ret     0
std::allocator<std::vector<int,std::allocator<int> > > const & std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first(void)const  ENDP ; std::_Compressed_pair<std::allocator<std::vector<int,std::allocator<int> > >,std::_Vector_val<std::_Simple_types<std::vector<int,std::allocator<int> > > >,1>::_Get_first

this$ = 8
_Dest$ = 16
_Al_$ = 24
std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >(unsigned int *,std::allocator<unsigned int> &) PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], rdx
        mov     QWORD PTR [rcx+16], r8
        ret     0
std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >(unsigned int *,std::allocator<unsigned int> &) ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >

this$ = 8
_Dest$ = 16
_Al_$ = 24
std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
        mov     QWORD PTR [rcx], rdx
        mov     rax, rcx
        mov     QWORD PTR [rcx+8], rdx
        mov     QWORD PTR [rcx+16], r8
        ret     0
std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >

this$ = 8
std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(void) PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
        mov     r8, QWORD PTR [rcx+16]
        mov     rdx, QWORD PTR [rcx+8]
        mov     rcx, QWORD PTR [rcx]
        jmp     void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(void) ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >

this$ = 8
std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >(void) PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT
        ret     0
std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >(void) ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >

this$ = 48
<_Vals_0>$ = 56
void std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>(std::vector<int,std::allocator<int> > const &) PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>, COMDAT
$LN6:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rcx
        mov     rcx, QWORD PTR [rcx+8]
        call    std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::vector<int,std::allocator<int> > const &) ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
        add     QWORD PTR [rbx+8], 24
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
void std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>(std::vector<int,std::allocator<int> > const &) ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Emplace_back<std::vector<int,std::allocator<int> > const &>

this$ = 8
<_Vals_0>$ = 16
void std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int const &>(unsigned int const &) PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int const &>, COMDAT
        mov     r8, QWORD PTR [rcx+8]
        mov     eax, DWORD PTR [rdx]
        mov     DWORD PTR [r8], eax
        add     QWORD PTR [rcx+8], 4
        ret     0
void std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int const &>(unsigned int const &) ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int const &>

this$ = 8
unsigned int * std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release(void) PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        mov     QWORD PTR [rcx], rax
        ret     0
unsigned int * std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release(void) ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release

this$ = 8
std::vector<int,std::allocator<int> > * std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release(void) PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release, COMDAT
        mov     rax, QWORD PTR [rcx+8]
        mov     QWORD PTR [rcx], rax
        ret     0
std::vector<int,std::allocator<int> > * std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release(void) ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::_Release

_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$ = 72
int * std::_Uninitialized_copy<int *,std::allocator<int> >(int * const,int * const,int *,std::allocator<int> &) PROC ; std::_Uninitialized_copy<int *,std::allocator<int> >, COMDAT
$LN4:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rsi, r8
        mov     rdi, rdx
        mov     rbx, rcx
        call    int * std::_Copy_memmove<int *,int *>(int *,int *,int *) ; std::_Copy_memmove<int *,int *>
        sub     rdi, rbx
        mov     rbx, QWORD PTR [rsp+48]
        sar     rdi, 2
        lea     rax, QWORD PTR [rsi+rdi*4]
        mov     rsi, QWORD PTR [rsp+56]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
int * std::_Uninitialized_copy<int *,std::allocator<int> >(int * const,int * const,int *,std::allocator<int> &) ENDP ; std::_Uninitialized_copy<int *,std::allocator<int> >

_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$ = 72
int * std::_Uninitialized_copy<int const *,std::allocator<int> >(int const * const,int const * const,int *,std::allocator<int> &) PROC ; std::_Uninitialized_copy<int const *,std::allocator<int> >, COMDAT
$LN4:
        mov     QWORD PTR [rsp+8], rbx
        mov     QWORD PTR [rsp+16], rsi
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rsi, r8
        mov     rdi, rdx
        mov     rbx, rcx
        call    int * std::_Copy_memmove<int const *,int *>(int const *,int const *,int *) ; std::_Copy_memmove<int const *,int *>
        sub     rdi, rbx
        mov     rbx, QWORD PTR [rsp+48]
        sar     rdi, 2
        lea     rax, QWORD PTR [rsi+rdi*4]
        mov     rsi, QWORD PTR [rsp+56]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
int * std::_Uninitialized_copy<int const *,std::allocator<int> >(int const * const,int const * const,int *,std::allocator<int> &) ENDP ; std::_Uninitialized_copy<int const *,std::allocator<int> >

_Backout$1 = 32
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) PROC ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >, COMDAT
$LN23:
        mov     rax, rsp
        mov     QWORD PTR [rax+8], rbx
        mov     QWORD PTR [rax+16], rbp
        mov     QWORD PTR [rax+24], rsi
        push    rdi
        sub     rsp, 64                             ; 00000040H
        mov     rsi, r9
        mov     rbx, r8
        mov     rbp, rdx
        mov     rdi, rcx
        mov     QWORD PTR [rax-40], rbx
        mov     QWORD PTR [rax-32], rbx
        mov     QWORD PTR [rax-24], r9
        cmp     rcx, rdx
        je      SHORT $LN3@Uninitiali
$LL4@Uninitiali:
        mov     rdx, rdi
        mov     rcx, rbx
        call    std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >(std::vector<int,std::allocator<int> > const &) ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
        add     rbx, 24
        mov     QWORD PTR _Backout$1[rsp+8], rbx
        add     rdi, 24
        cmp     rdi, rbp
        jne     SHORT $LL4@Uninitiali
$LN3@Uninitiali:
        mov     r8, rsi
        mov     rdx, rbx
        mov     rcx, rbx
        call    void std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > *,std::vector<int,std::allocator<int> > * const,std::allocator<std::vector<int,std::allocator<int> > > &) ; std::_Destroy_range<std::allocator<std::vector<int,std::allocator<int> > > >
        mov     rax, rbx
        mov     rbx, QWORD PTR [rsp+80]
        mov     rbp, QWORD PTR [rsp+88]
        mov     rsi, QWORD PTR [rsp+96]
        add     rsp, 64                             ; 00000040H
        pop     rdi
        ret     0
std::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > const * const,std::vector<int,std::allocator<int> > *,std::allocator<std::vector<int,std::allocator<int> > > &) ENDP ; std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >
_Backout$1 = 32
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
int `dtor$0::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(dtor$0::std const * const,dtor$0::std const * const,dtor$0::std *,dtor$0::allocator<std::vector<int,std::allocator<int> > > &)'::`1'::dtor$0 PROC ; `std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >'::`1'::dtor$0
        lea     rcx, QWORD PTR _Backout$1[rdx]
        jmp     std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(void) ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
int `dtor$0::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(dtor$0::std const * const,dtor$0::std const * const,dtor$0::std *,dtor$0::allocator<std::vector<int,std::allocator<int> > > &)'::`1'::dtor$0 ENDP ; `std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >'::`1'::dtor$0

_First$ = 8
_Count$ = 16
_Val$ = 24
_Al$ = 32
unsigned int * std::_Uninitialized_fill_n<std::allocator<unsigned int> >(unsigned int *,unsigned __int64,unsigned int const &,std::allocator<unsigned int> &) PROC ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >, COMDAT
        mov     rax, rcx
        test    rdx, rdx
        je      SHORT $LN3@Uninitiali
$LL4@Uninitiali:
        mov     ecx, DWORD PTR [r8]
        mov     DWORD PTR [rax], ecx
        add     rax, 4
        sub     rdx, 1
        jne     SHORT $LL4@Uninitiali
$LN3@Uninitiali:
        ret     0
unsigned int * std::_Uninitialized_fill_n<std::allocator<unsigned int> >(unsigned int *,unsigned __int64,unsigned int const &,std::allocator<unsigned int> &) ENDP ; std::_Uninitialized_fill_n<std::allocator<unsigned int> >

_Val$ = 8
std::_Vector_val<std::_Simple_types<unsigned int> > * std::addressof<std::_Vector_val<std::_Simple_types<unsigned int> > >(std::_Vector_val<std::_Simple_types<unsigned int> > &) PROC ; std::addressof<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT
        mov     rax, rcx
        ret     0
std::_Vector_val<std::_Simple_types<unsigned int> > * std::addressof<std::_Vector_val<std::_Simple_types<unsigned int> > >(std::_Vector_val<std::_Simple_types<unsigned int> > &) ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<unsigned int> > >

_Ptr$ = 8
int * std::_Unfancy<int>(int *) PROC                    ; std::_Unfancy<int>, COMDAT
        mov     rax, rcx
        ret     0
int * std::_Unfancy<int>(int *) ENDP                    ; std::_Unfancy<int>

_Ptr$ = 8
unsigned int * std::_Unfancy<unsigned int>(unsigned int *) PROC                    ; std::_Unfancy<unsigned int>, COMDAT
        mov     rax, rcx
        ret     0
unsigned int * std::_Unfancy<unsigned int>(unsigned int *) ENDP                    ; std::_Unfancy<unsigned int>

_Ptr$ = 8
std::vector<int,std::allocator<int> > * std::_Unfancy<std::vector<int,std::allocator<int> > >(std::vector<int,std::allocator<int> > *) PROC ; std::_Unfancy<std::vector<int,std::allocator<int> > >, COMDAT
        mov     rax, rcx
        ret     0
std::vector<int,std::allocator<int> > * std::_Unfancy<std::vector<int,std::allocator<int> > >(std::vector<int,std::allocator<int> > *) ENDP ; std::_Unfancy<std::vector<int,std::allocator<int> > >

_Ptr$ = 8
int const * std::_Get_unwrapped<int const >(int const * const) PROC      ; std::_Get_unwrapped<int const >, COMDAT
        mov     rax, rcx
        ret     0
int const * std::_Get_unwrapped<int const >(int const * const) ENDP      ; std::_Get_unwrapped<int const >

_Ptr$ = 8
std::vector<int,std::allocator<int> > const * std::_Get_unwrapped<std::vector<int,std::allocator<int> > const >(std::vector<int,std::allocator<int> > const * const) PROC ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const >, COMDAT
        mov     rax, rcx
        ret     0
std::vector<int,std::allocator<int> > const * std::_Get_unwrapped<std::vector<int,std::allocator<int> > const >(std::vector<int,std::allocator<int> > const * const) ENDP ; std::_Get_unwrapped<std::vector<int,std::allocator<int> > const >

_Ptr$ = 8
int * std::_Get_unwrapped<int>(int * const) PROC          ; std::_Get_unwrapped<int>, COMDAT
        mov     rax, rcx
        ret     0
int * std::_Get_unwrapped<int>(int * const) ENDP          ; std::_Get_unwrapped<int>

_First$ = 8
_Last$ = 16
__int64 std::distance<int const *>(int const *,int const *) PROC              ; std::distance<int const *>, COMDAT
        sub     rdx, rcx
        sar     rdx, 2
        mov     rax, rdx
        ret     0
__int64 std::distance<int const *>(int const *,int const *) ENDP              ; std::distance<int const *>

_First$ = 8
_Last$ = 16
__int64 std::distance<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *) PROC ; std::distance<std::vector<int,std::allocator<int> > const *>, COMDAT
        sub     rdx, rcx
        mov     rax, 3074457345618258603      ; 2aaaaaaaaaaaaaabH
        imul    rdx
        sar     rdx, 2
        mov     rax, rdx
        shr     rax, 63                             ; 0000003fH
        add     rax, rdx
        ret     0
__int64 std::distance<std::vector<int,std::allocator<int> > const *>(std::vector<int,std::allocator<int> > const *,std::vector<int,std::allocator<int> > const *) ENDP ; std::distance<std::vector<int,std::allocator<int> > const *>

_First$ = 48
_Last$ = 56
_Dest$ = 64
int * std::_Copy_memmove<int *,int *>(int *,int *,int *) PROC      ; std::_Copy_memmove<int *,int *>, COMDAT
$LN4:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rdx
        mov     rdi, r8
        sub     rbx, rcx
        mov     rdx, rcx
        mov     r8, rbx
        mov     rcx, rdi
        call    memmove
        lea     rax, QWORD PTR [rbx+rdi]
        mov     rbx, QWORD PTR [rsp+48]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
int * std::_Copy_memmove<int *,int *>(int *,int *,int *) ENDP      ; std::_Copy_memmove<int *,int *>

_First$ = 48
_Last$ = 56
_Dest$ = 64
unsigned int * std::_Copy_memmove<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) PROC      ; std::_Copy_memmove<unsigned int *,unsigned int *>, COMDAT
$LN4:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rdx
        mov     rdi, r8
        sub     rbx, rcx
        mov     rdx, rcx
        mov     r8, rbx
        mov     rcx, rdi
        call    memmove
        lea     rax, QWORD PTR [rbx+rdi]
        mov     rbx, QWORD PTR [rsp+48]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
unsigned int * std::_Copy_memmove<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) ENDP      ; std::_Copy_memmove<unsigned int *,unsigned int *>

_First$ = 48
_Last$ = 56
_Dest$ = 64
int * std::_Copy_memmove<int const *,int *>(int const *,int const *,int *) PROC   ; std::_Copy_memmove<int const *,int *>, COMDAT
$LN4:
        mov     QWORD PTR [rsp+8], rbx
        push    rdi
        sub     rsp, 32                             ; 00000020H
        mov     rbx, rdx
        mov     rdi, r8
        sub     rbx, rcx
        mov     rdx, rcx
        mov     r8, rbx
        mov     rcx, rdi
        call    memmove
        lea     rax, QWORD PTR [rbx+rdi]
        mov     rbx, QWORD PTR [rsp+48]
        add     rsp, 32                             ; 00000020H
        pop     rdi
        ret     0
int * std::_Copy_memmove<int const *,int *>(int const *,int const *,int *) ENDP   ; std::_Copy_memmove<int const *,int *>

_First$ = 8
_Last$ = 16
_Dest$ = 24
unsigned int * std::_Move_unchecked<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) PROC    ; std::_Move_unchecked<unsigned int *,unsigned int *>, COMDAT
        jmp     unsigned int * std::_Copy_memmove<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) ; std::_Copy_memmove<unsigned int *,unsigned int *>
unsigned int * std::_Move_unchecked<unsigned int *,unsigned int *>(unsigned int *,unsigned int *,unsigned int *) ENDP    ; std::_Move_unchecked<unsigned int *,unsigned int *>

this$ = 48
std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >(void) PROC ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >, COMDAT
$LN11:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, QWORD PTR [rcx]
        test    rbx, rbx
        je      SHORT $LN5@Tidy_guard
        mov     rcx, QWORD PTR [rbx]
        test    rcx, rcx
        je      SHORT $LN5@Tidy_guard
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN5@Tidy_guard:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >(void) ENDP ; std::_Tidy_guard<std::vector<int,std::allocator<int> > >::~_Tidy_guard<std::vector<int,std::allocator<int> > >

this$ = 48
std::_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >::~_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >(void) PROC ; std::_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >::~_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >, COMDAT
$LN11:
        push    rbx
        sub     rsp, 32                             ; 00000020H
        mov     rbx, QWORD PTR [rcx]
        test    rbx, rbx
        je      SHORT $LN5@Tidy_guard
        mov     rcx, QWORD PTR [rbx]
        test    rcx, rcx
        je      SHORT $LN5@Tidy_guard
        mov     rdx, QWORD PTR [rbx+16]
        sub     rdx, rcx
        and     rdx, -4
        call    void std::_Deallocate<16,0>(void *,unsigned __int64) ; std::_Deallocate<16,0>
        and     QWORD PTR [rbx], 0
        and     QWORD PTR [rbx+8], 0
        and     QWORD PTR [rbx+16], 0
$LN5@Tidy_guard:
        add     rsp, 32                             ; 00000020H
        pop     rbx
        ret     0
std::_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >::~_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >(void) ENDP ; std::_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >::~_Tidy_guard<std::vector<unsigned int,std::allocator<unsigned int> > >

this$ = 48
std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >(void) PROC ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >, COMDAT
$LN6:
        sub     rsp, 40                             ; 00000028H
        mov     rcx, QWORD PTR [rcx]
        test    rcx, rcx
        je      SHORT $LN2@Tidy_guard
        call    void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Tidy
$LN2@Tidy_guard:
        add     rsp, 40                             ; 00000028H
        ret     0
std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >(void) ENDP ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >

this$ = 48
_Guard$1 = 56
_First$ = 56
_Last$ = 64
__formal$ = 72
int `void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::forward_iterator_tag)'::`1'::dtor$0 PROC ; `std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>'::`1'::dtor$0
        lea     rcx, QWORD PTR _Guard$1[rdx]
        jmp     std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >(void) ; std::_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >::~_Tidy_guard<std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > > >
int `void std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>(vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::vector<int,std::allocator<int> > const *,vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::forward_iterator_tag)'::`1'::dtor$0 ENDP ; `std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::_Range_construct_or_tidy<std::vector<int,std::allocator<int> > const *>'::`1'::dtor$0

_Backout$1 = 32
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
int `dtor$0::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(dtor$0::std const * const,dtor$0::std const * const,dtor$0::std *,dtor$0::allocator<std::vector<int,std::allocator<int> > > &)'::`1'::dtor$0 PROC ; `std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >'::`1'::dtor$0
        lea     rcx, QWORD PTR _Backout$1[rdx]
        jmp     std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >(void) ; std::_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<int,std::allocator<int> > > >
int `dtor$0::vector<int,std::allocator<int> > * std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >(dtor$0::std const * const,dtor$0::std const * const,dtor$0::std *,dtor$0::allocator<std::vector<int,std::allocator<int> > > &)'::`1'::dtor$0 ENDP ; `std::_Uninitialized_copy<std::vector<int,std::allocator<int> > const *,std::allocator<std::vector<int,std::allocator<int> > > >'::`1'::dtor$0

this$ = 48
_Count$ = 56
_Val$ = 64
_Al$ = 72
int `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,vector<bool,std::allocator<bool> >::allocator<bool> const &)'::`1'::dtor$0 PROC ; `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >'::`1'::dtor$0
        mov     rcx, QWORD PTR this$[rdx]
        jmp     std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >
int `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >(unsigned __int64,bool const &,vector<bool,std::allocator<bool> >::allocator<bool> const &)'::`1'::dtor$0 ENDP ; `std::vector<bool,std::allocator<bool> >::vector<bool,std::allocator<bool> >'::`1'::dtor$0

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$0 PROC   ; `solve_vector_simple'::`1'::dtor$0
        lea     rcx, QWORD PTR $T13[rdx]
        jmp     std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
int `int solve_vector_simple(void)'::`1'::dtor$0 ENDP   ; `solve_vector_simple'::`1'::dtor$0

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$1 PROC   ; `solve_vector_simple'::`1'::dtor$1
        lea     rcx, QWORD PTR $T13[rdx+24]
        jmp     std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
int `int solve_vector_simple(void)'::`1'::dtor$1 ENDP   ; `solve_vector_simple'::`1'::dtor$1

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$3 PROC   ; `solve_vector_simple'::`1'::dtor$3
        push    rbp
        sub     rsp, 32                             ; 00000020H
        mov     rbp, rdx
        lea     r9, OFFSET FLAT:std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >(void) ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
        mov     r8d, 3
        mov     edx, 24
        lea     rcx, QWORD PTR $T13[rbp]
        call    void `eh vector destructor iterator'(void *,unsigned __int64,unsigned __int64,void (__cdecl*)(void *))
        add     rsp, 32                             ; 00000020H
        pop     rbp
        ret     0
int `int solve_vector_simple(void)'::`1'::dtor$3 ENDP   ; `solve_vector_simple'::`1'::dtor$3

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$4 PROC   ; `solve_vector_simple'::`1'::dtor$4
        lea     rcx, QWORD PTR matrix$[rdx]
        jmp     std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >(void) ; std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >::~vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >
int `int solve_vector_simple(void)'::`1'::dtor$4 ENDP   ; `solve_vector_simple'::`1'::dtor$4

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$5 PROC   ; `solve_vector_simple'::`1'::dtor$5
        lea     rcx, QWORD PTR digits$[rdx]
        jmp     std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >(void) ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
int `int solve_vector_simple(void)'::`1'::dtor$5 ENDP   ; `solve_vector_simple'::`1'::dtor$5

$T5 = 48
$T6 = 48
$T7 = 48
$T8 = 48
$T9 = 52
matrix$ = 56
digits$ = 80
$T10 = 112
$T11 = 128
$T12 = 144
$T13 = 160
__$ArrayPad$ = 240
int `int solve_vector_simple(void)'::`1'::dtor$6 PROC   ; `solve_vector_simple'::`1'::dtor$6
        lea     rcx, QWORD PTR digits$[rdx]
        jmp     std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >(void) ; std::_Vb_val<std::allocator<bool> >::~_Vb_val<std::allocator<bool> >
int `int solve_vector_simple(void)'::`1'::dtor$6 ENDP   ; `solve_vector_simple'::`1'::dtor$6